// WebTutor SCORM API (c)2002-... Websoft
// http://www.websoft.ru/
// 201203

var oCurrent = {};
var cmi = {};
var API =
{
	version: "1.2",
	lastError: "0",
	getParamResponse: "",
	putParamResponse: ""
};
var API_1484_11 =
{
	version: "1.3",
	lastError: "0",
	commError: "200",
	session_id: "",
	tracking_url: "",
	getParamResponse: "",
	putParamResponse: ""
};
var XWS =
{
	learning_comment: "",
	student_id: "",
	student_name: "",
	student_position: "",
	student_organization: "",
	student_login: "",
	student_email: "",
	student_code: ""
};
var WSSC =
{
	aLog: [],
	bAfterCommit: true,
	bBeforeCommit: false,
	bLog: false,
	bSendCMI: false,
	bSendComments: false,
	bSendLog: false,
	bStringsLoaded: false,
	iSessionStart: 0,
	oChildren12:
	{
		"cmi": "core,comments,comments_from_lms,interactions,launch_data,objectives,suspend_data,student_data,student_preference",
		"cmi.core": "credit,entry,exit,lesson_location,lesson_mode,lesson_status,score,session_time,student_id,student_name,total_time",
		"cmi.core.score": "max,min,raw",
		"cmi.interactions": "id,type,objectives,time,correct_responses,weighting,student_response,result,latency",
		"cmi.interactions.objectives": "id",
		"cmi.interactions.correct_responses": "pattern",
		"cmi.objectives": "id,score,status",
		"cmi.objectives.score": "max,min,raw",
		"cmi.student_data": "mastery_score,max_time_allowed,time_limit_action",
		"cmi.student_preference": "audio,language,speed,text"
	},
	oChildren2004:
	{
		"cmi": "comments_from_lms,comments_from_learner,completion_status,completion_threshold,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time",
		"cmi.score": "max,min,raw,scaled",
		"cmi.interactions": "id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description",
		"cmi.interactions.objectives": "id",
		"cmi.interactions.correct_responses": "pattern",
		"cmi.objectives": "id,score,success_status,completion_status,progress_measure,description",
		"cmi.objectives.score": "max,min,raw,scaled",
		"cmi.learner_preference": "audio_level,language,delivery_speed,audio_captioning",
		"cmi.comments_from_learner": "comment,location,timestamp",
		"cmi.comments_from_lms": "comment,location,timestamp"
	},
	oStrings:
	{
		"get-error": "GET data failed.",
		"commit-error": "COMMIT data failed.",
		"parse-error": "Parse data failed.",
		"server-error": "XMLHTTP server error.",
		"invalid-command": "Server access denied - invalid command",
		"invalid-session-id": "Server access denied - invalid session ID",
		"invalid-password": "Server access denied - invalid password",
		"unknown-reason": "Unknown error. Data not sent.",
		"support-header": "For tech support:"
	},
	sScorm: "",
	Log:
	{
		Append: function (oArgs)
		{
			if(WSSC.bLog)
			{
				// sAction, sStep, sParam, sResult, iError, sDesc
				var oEvent = { z: ("SCORM" + WSSC.sScorm), t: ConvertDateToISO8601(new Date(), true), a: oArgs.sAction };
				if(oArgs.sStep!=null)
				{
					oEvent.s = oArgs.sStep;
				}
				if(oArgs.sParam!=null)
				{
					oEvent.p = oArgs.sParam;
				}
				if(oArgs.sValue!=null)
				{
					oEvent.v = oArgs.sValue;
				}
				if(oArgs.sResult!=null)
				{
					oEvent.r = oArgs.sResult;
				}
				if(oArgs.iError!=null)
				{
					oEvent.e = oArgs.iError;
				}
				if(oArgs.sDesc!=null)
				{
					oEvent.d = oArgs.sDesc;
				}
				WSSC.aLog.push(oEvent);
				if(oCurrent.debug)
				{
					var sString = "SCORM" + WSSC.sScorm + ": " + oArgs.sAction;
					if(oArgs.sStep!=null)
					{
						sString += ",\nstep=" + oArgs.sStep;
					}
					if(oArgs.sParam!=null)
					{
						sString += ",\nparam=" + oArgs.sParam;
					}
					if(oArgs.sValue!=null)
					{
						sString += ",\nvalue=" + oArgs.sValue;
					}
					if(oArgs.sResult!=null)
					{
						sString += ",\nresult=" + oArgs.sResult;
					}
					if(oArgs.iError!=null)
					{
						sString += ",\nerror=" + oArgs.iError;
					}
					if(oArgs.sDesc!=null)
					{
						sString += ", " + oArgs.sDesc;
					}
					window.console.log(sString);
				}
			}
			return WSSC.bLog;
		},
		Clear: function (oArgs)
		{
			WSSC.aLog = [ { t: ConvertDateToISO8601(new Date(), true), a: "CLEARLOG" } ];
			return true;
		},
		Dump: function (oArgs)
		{
			var sString = JSON.stringify(WSSC.aLog);
			WSSC.Log.Clear();
			return sString;
		}

	},
	Send: function (oArgs)
	{
		if(!(WSSC.bSendCMI || WSSC.bSendComments || WSSC.bSendLog)) return false;
		var sType = "";
		var sData = "command=wt_log_event&session_id=" + escape(oCurrent.session_id) + "&date=" + ConvertDateToISO8601(new Date()) + "&location=" + ((oCurrent.version=="1.3") ? cmi.location : cmi.core.lesson_location);
		if(oArgs!=null && WSSC.bSendComments)
		{
			if(oArgs.sComment!=null && oArgs.sComment!="")
			{
				sData += "&type=comment&comment=" + escape(oArgs.sComment);
				sType = "comment;";
			}
			else
			{
				return false;
			}
		}
		if(sType=="")
		{
			if(WSSC.bSendCMI || WSSC.bSendLog)
			{
				sData += "&type=log";
				if(WSSC.bSendCMI)
				{
					sData += "&text=" + JSON.stringify(cmi);
				}
				if(WSSC.bSendLog)
				{
					sData += "&log=" + WSSC.Log.Dump();
				}
			}
			else
			{
				return false;
			}
		}
		$.ajax(
		{
			type: "POST",
			url: oCurrent.tracking_url,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			data: sData,
			dataType: "text",
			complete: function (jqXHR, sStatus)
			{
				if(WSSC.bLog) WSSC.Log.Append({ sAction: "Send", sStep: "2", iError: 1000, sDesc: "XMLHTTP Status: " + sStatus });
				return false;
			},
			error: function (jqXHR, sStatus, sStatusString)
			{
				if(WSSC.bLog) WSSC.Log.Append({ sAction: "Send", sStep: "3", iError: 1000, sDesc: "XMLHTTP Status: " + sStatus + " " + sStatusString });
				return false;
			},
			success: function (sData, sStatus, jqXHR)
			{
				if(WSSC.bLog) WSSC.Log.Append({ sAction: "Send", sStep: "final", iError: 0, sDesc: "Data obtained: " + sData });
				return true;
			}
		});
		return true;
	},
	Time:
	{
		InitSession: function (oArgs)
		{
			WSSC.iSessionStart = (new Date()).valueOf();
		},
		SessionTime: function (oArgs)
		{

		}
	}
};

{ // WSAPI
	window.WSAPI = function (oArgs)
	{
		this.bStringsLoaded = false;

		this.oStrings = null;

		this.sVersion = "";
		this.sEntryPoint = "";
		this.bIEInCompatibilityMode = false;
		this.sMSXMLProgID = "";
		this.sMSXMLHTTPProgID = "";

		this.Constructor();

		API.LMSInitialize = this._LMSInitialize;
		API.LMSFinish = this._LMSFinish;
		API.LMSGetValue = this._LMSGetValue;
		API.LMSSetValue = this._LMSSetValue;
		API.LMSCommit = this._LMSCommit;
		API.LMSGetLastError = this._LMSGetLastError;
		API.LMSGetErrorString = this._LMSGetErrorString;
		API.LMSGetDiagnostic = this._LMSGetDiagnostic;
		API.ResetAPI = this.ResetAPI;
		API.Comment = this.SubmitComment;

		API_1484_11.Initialize = this._Initialize;
		API_1484_11.Terminate = this._LMSFinish;
		API_1484_11.GetValue = this._LMSGetValue;
		API_1484_11.SetValue = this._LMSSetValue;
		API_1484_11.Commit = this._LMSCommit;
		API_1484_11.GetLastError = this._LMSGetLastError;
		API_1484_11.GetErrorString = this._GetErrorString;
		API_1484_11.GetDiagnostic = this._LMSGetDiagnostic;
		API_1484_11.ResetAPI = this.ResetAPI;
		API_1484_11.Comment = this.SubmitComment;
		return this;
	};
	WSAPI.prototype._CheckIE =  function ()
	{
		var bCompat = false;
		var sUserAgent = navigator.userAgent.toLowerCase();
		if (sUserAgent.indexOf("msie") != -1 || !!navigator.userAgent.match(/Trident\/7\./))
		{
			try
			{
				bCompat = (document.documentMode<9);
			}
			catch(e)
			{
				bCompat = true;
			}
			if(bCompat)
			{
				var oDoc;
				var sProgID;
				var i;
				for(i=6; i>=3; i--)
				{
					try
					{
						sProgID = "MSXML2.DOMDocument."+ i +".0";
						oDoc = new ActiveXObject(sProgID);
					}
					catch (e)
					{
					}
					if (typeof oDoc == "object")
					{
						this.sMSXMLProgID = sProgID;
						break;
					}
				}
				for(i=6; i>=3; i--)
				{
					try
					{
						sProgID = "MSXML2.XMLHTTP."+ i +".0";
						oDoc = new ActiveXObject(sProgID);
					}
					catch (e)
					{
					}
					if(typeof oDoc == "object")
					{
						this.sMSXMLHTTPProgID = sProgID;
						break;
					}
				}
			}
		}
		return bCompat;
	};
	WSAPI.prototype._UnmaskSpace = function (oArgs)
	{
		sString = oArgs.target;
		var re = /\s/g;
		sString = sString.replace(re, "+");
		return sString;
	};
	WSAPI.prototype._CallServer = function (oArgs)
	{
		var sCommitData = this._CreateCommitData();
		oCurrent.last_command = "putparam";
		var sData = "command=PutParam&version=2.0&session_id=" + escape(oCurrent.session_id) + "&AICC_Data=" + escape(sCommitData);
		var oFakeError = new Error();
		var sStack = oFakeError.hasOwnProperty("stack") ? oFakeError.stack.toLowerCase() : "unload";
		this.bAsync = (oFakeError.stack!=null && (sStack.indexOf("unload")!=-1 || sStack.indexOf("beforeunload")!=-1)); // async for unload
		try
		{
			var oXmlHttp = (this.bIEInCompatibilityMode ? (new ActiveXObject(this.sMSXMLHTTPProgID)) : (new XMLHttpRequest()));
			oXmlHttp.open("POST", oCurrent.tracking_url, this.bAsync);
			oXmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			oXmlHttp.send(sData);
			if(oXmlHttp.status==200 || this.bAsync)
			{
				API.putParamResponse = oXmlHttp.responseText;
				oCurrent.comm_error="200";
				return true;
			}
			else
			{
				alert(WSSC.oStrings["server-error"] + WSSC.oStrings["support-string"] + oXmlHttp.status);
				oCurrent.comm_error = oXmlHttp.status;
			}
		}
		catch(e)
		{
			alert(WSSC.oStrings["commit-error"] + WSSC.oStrings["support-string"] + e.message);
		}
		return this.bAsync;
	};
	WSAPI.prototype._CheckCommited = function ()
	{
		if(this.bAsync)
		{
			this.bAsync = false;
			return true;
		}
		var sTmpResponse = API.putParamResponse.toLowerCase();
		if(sTmpResponse.indexOf('error=0')!=-1)
		{
			oCurrent.comm_error="200";
			return true;
		}
		else
		{
			if(sTmpResponse.indexOf('error=1')!=-1)
			{
				oCurrent.comm_error = "1";
				alert(WSSC.oStrings["invalid-command"]);
			}
			else
			{
				if(sTmpResponse.indexOf('error=3')!=-1)
				{
					oCurrent.comm_error = "3";
					alert(WSSC.oStrings["invalid-session-id"]);
				}
				else
				{
					if(sTmpResponse.indexOf('error=2')!=-1)
					{
						oCurrent.comm_error = "2";
						alert(WSSC.oStrings["invalid-password"]);
					}
					else
					{
						oCurrent.comm_error = "500";
						alert(WSSC.oStrings["unknown-reason"]);
					}
				}
			}
		}
		return false;
	};
	WSAPI.prototype._CreateCommitData = function ()
	{
		var sCRLF = String.fromCharCode(13,10);
		var sData = "[CORE]" + sCRLF;
		sData += "LESSON_LOCATION=";
		var sLocation = (oCurrent.version=="1.3") ? cmi.location : cmi.core.lesson_location;
		sData += (sLocation==null || sLocation=="") ? "" : ("B64_" + Base64.encode(sLocation) + "_B64");
		sData += sCRLF + "LESSON_STATUS=";
		if(oCurrent.version=="1.3")
		{
			if(cmi.success_status!="passed" && cmi.success_status!="failed")
			{
				sData += cmi.completion_status.charAt(0);
			}
			else
			{
				sData += cmi.success_status.charAt(0);
			}
			sData += "," + cmi.completion_status.charAt(0) + "," + cmi.success_status.charAt(0);
		}
		else
		{
			sData += cmi.core.lesson_status.charAt(0);
		}
		sData += sCRLF + "EXIT=";
		sData += (oCurrent.version=="1.3") ? cmi.exit : cmi.core.exit;
		var sTmpParam = cmi.core.score.raw;
		if(cmi.core.score._max!="")
		{
			sTmpParam += "," + cmi.core.score._max;
		}
		if(cmi.core.score._min!="")
		{
			sTmpParam += "," + cmi.core.score._min;
		}
		sData += sCRLF + "SCORE=";
		sData += (oCurrent.version=="1.3") ? cmi.score.raw.toString() : cmi.core.score.raw.toString();
		sData += ",";
		sData += (oCurrent.version=="1.3") ? cmi.score._max.toString() : cmi.core.score._max.toString();
		sData += ",";
		sData += (oCurrent.version=="1.3") ? cmi.score._min.toString() : cmi.core.score._min.toString();
		if(oCurrent.version=="1.3")
		{
			sData += "," + cmi.score.scaled.toString();
		}
		sData += sCRLF + "TIME=";
		if(oCurrent.bSCOSessionTime)
		{
			sData += ConvertPeriodToISO8601(oCurrent.session_time_to_send);
		}
		else
		{
			var iNow = (new Date()).valueOf();
			oCurrent.alt_session_time_to_send = iNow - oCurrent.alt_session_timer + ConvertPeriodFromISO8601(cmi.total_time);
			sData += ConvertPeriodToISO8601(oCurrent.alt_session_time_to_send);
			oCurrent.alt_session_time_to_send = 0;
		}
		sData += sCRLF + "[CORE_LESSON]" + sCRLF;
		sData += (cmi.suspend_data==null || cmi.suspend_data=="") ? sCRLF : ("B64_" + Base64.encode(cmi.suspend_data) + "_B64" + sCRLF);
		sData += "[OBJECTIVES_STATUS]" + sCRLF;
		sData += (oCurrent.sendtype=="xml") ? this._TranslateObjectivesXML() : this._TranslateObjectives();
		sData += sCRLF + "[EVALUATION]" + sCRLF;
		sData += (oCurrent.sendtype=="xml") ? this._TranslateEvaluationXML() : this._TranslateEvaluation();
		if(cmi.comments_from_learner.length!=0)
		{
			sData += sCRLF + "[COMMENTS]" + sCRLF + JSON.stringify(cmi.comments_from_learner);
		}
		else
		{
			sData += sCRLF + "[COMMENTS]" + sCRLF;
		}
		sData += sCRLF + "[STUDENT_DATA]";
		sData += sCRLF + "mastery_score=" + cmi.student_data.mastery_score;
		sData += sCRLF + "max_time_allowed=" + cmi.student_data.max_time_allowed;
		sData += sCRLF + "time_limit_action=" + cmi.student_data.time_limit_action;
		sData += sCRLF + "[STUDENT_PREFERENCE]";
		sData += sCRLF + "audio=" + cmi.student_preference.audio;
		sData += sCRLF + "language=" + cmi.student_preference.language;
		sData += sCRLF + "speed=" + cmi.student_preference.speed;
		sData += sCRLF + "text=" + cmi.student_preference._text;
		sData += sCRLF;
		return sData;
	};
	WSAPI.prototype._GetErrorString = function (sError)
	{
		// 2004
		var oErrors =
		{
			0: "No error",
			101: "General exception",
			102: "General Initialization Failure",
			103: "Already Initialized",
			104: "Content Instance Terminated",
			111: "General Termination Failure",
			112: "Termination Before Initialization",
			113: "Termination After Termination",
			122: "Retrieve Data Before Initialization",
			123: "Retrieve Data After Termination",
			132: "Store Data Before Initialization",
			133: "Store Data After Termination",
			142: "Commit Before Initialization",
			143: "Commit After Termination",
			201: "General Argument Error",
			301: "General Get Failure",
			351: "General Set Failure",
			391: "General Commit Failure",
			401: "Undefined Data Model Element",
			402: "Unimplemented Data Model Element",
			403: "Data Model Element Value Not Initialized",
			404: "Data Model Element Is Read Only",
			405: "Data Model Element Is Write Only",
			406: "Data Model Element Type Mismatch",
			407: "Data Model Element Value Out Of Range",
			408: "Data Model Dependency Not Established"
		};
		var nError = 0;
		if(sError=="")
		{
			nError = +API_1484_11.lastError;
		}
		else
		{
			nError = parseInt(sError,10);
			if(isNaN(nError))
			{
				nError = 0;
			}
		}
		return oErrors[nError];
	};
	WSAPI.prototype._GetParams = function (oArgs)
	{
		WSSC.Log.Append({ sAction: "Initialize -> GetParams", sStep: "start" });
		oCurrent.last_command = "getparam";
		var sData = "command=GetParam&version=2.0&session_id=" + escape(oCurrent.session_id) + "&AICC_Data=";
		var oXmlHttp = (this.bIEInCompatibilityMode ? (new ActiveXObject(this.sMSXMLHTTPProgID)) : (new XMLHttpRequest()));
		oXmlHttp.open("POST", oCurrent.tracking_url, false); // synchronous!
		oXmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		oXmlHttp.send(sData);
		if(oXmlHttp.status==200)
		{
			oCurrent.sXHRResponse = oXmlHttp.responseText;
			oCurrent.comm_error = "200";
			WSSC.Log.Append({ sAction: "Initialize -> GetParams", sStep: "final", iError: 0, sDesc: "XMLHTTP Get. Data obtained: " + oXmlHttp.responseText });
			return true;
		}
		else
		{
			alert(WSSC.oStrings["get-error"] + WSSC.oStrings["support-string"] + oXmlHttp.status);
			oCurrent.comm_error = oXmlHttp.status;
			WSSC.Log.Append({ sAction: "Initialize -> GetParams", sStep: "fail2", iError: 1000, sDesc: "XMLHTTP Get failed. Status: " + oCurrent.comm_error });
			return false;
		}
		return false;
	};
	WSAPI.prototype._GetSessionID = function (oArgs)
	{
		WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "start" });
		var bSID = false;
		var bSURL = false;
		if(API.session_id!=null && API.tracking_url!=null)
		{
			if(API.session_id!="" && API.tracking_url!="")
			{
				oCurrent.session_id = API.session_id;
				bSID = true;
				oCurrent.tracking_url = API.tracking_url;
				bSURL = true;
				WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "break1", iError: 0, sDesc: "Session ID and Tracking URL already defined, no changes: " + API.session_id + ", " + API.tracking_url });
				if(window.g_oCP==null)
				{
					return true;
				}
			}
		}
		// proceed anyway to get debug flags
		var oWindow = null;
		var sURL = "";
		try
		{
			oWindow = courseWindow;
			sURL = unescape(oWindow.location.href);
		}
		catch(e)
		{
			WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail1", iError: 1000, sDesc: "Course window not found" });
		}
		if(oWindow==null)
		{
			if($("#cp_course_container").length > 0)
			{
				oWindow = $("#cp_course_container")[0];
			}
			if(oWindow==null)
			{
				WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail2", iError: 1000, sDesc: "Course player window not found" });
				return false;
			}
			sURL = $(oWindow).attr("src");
		}
		if(sURL=="")
		{
			WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail3", iError: 1000, sDesc: "Course window URL contains no parameters" });
			return false;
		}
		WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "info4", iError: 0, sDesc: "URL obtained: " + sURL });
		var sTmp = sURL.toLowerCase();
		var aURL = sURL.split("?");
		if(aURL.length<2 && (!bSID || !bSURL))
		{
			WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail5", iError: 1000, sDesc: "Course window URL contains no parameters" });
			return false;
		}
		if(aURL.length>=2)
		{
			var aParams = aURL[1].split("&");
			var aParts;
			for(var i=0;i<aParams.length;i++)
			{
				aParts = aParams[i].split("=");
				if(aParts.length!=2)
				{
					continue;
				}
				switch(aParts[0])
				{
					case "aicc_sid":
					{
						if(!bSID)
						{
							if(aParts[1]=="")
							{
								break;
							}
							oCurrent.session_id = aParts[1];
							bSID = true;
						}
						break;
					}
					case "aicc_url":
					{
						if(!bSURL)
						{
							if(aParts[1]=="")
							{
								break;
							}
							oCurrent.tracking_url = unescape(aParts[1]);
							bSURL = true;
						}
						break;
					}
					case "comment":
					{
						if(parseInt(aParts[1])==1)
						{
							WSSC.bSendComments = true;
						}
						break;
					}
					case "log":
					{
						aParts[1] = aParts[1];
						if(aParts[1]=="full")
						{
							WSSC.bLog = true;
							WSSC.bSendCMI = true;
							WSSC.bSendLog = true;
						}
						else
						{
							var aLog = aParts[1].split(";");
							for(var j=0; j<aLog.length; j++)
							{
								switch(aLog[i])
								{
									case "log":
									{
										WSSC.bLog = true;
										WSSC.bSendLog = true;
										break;
									}
									case "text":
									{
										WSSC.bSendCMI = true;
										break;
									}
								}
							}
						}
						break;
					}
				}
			}
		}
		if(!bSID && oCurrent.session_id=="")
		{
			WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail8", iError: 1000, sDesc: "Failure parsing Session ID" });
			return false;
		}
		if(!bSURL && oCurrent.tracking_url=="")
		{
			WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "fail9", iError: 1000, sDesc: "Failure parsing Session URL" });
			return false;
		}
		WSSC.Log.Append({ sAction: "Initialize -> GetSessionID", sStep: "final", iError: 0, sDesc: "Session ID: " + oCurrent.session_id + ", Session URL: " + oCurrent.tracking_url });
		return true;
	};
	WSAPI.prototype._Initialize = function (sParam)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		oThis.sVersion = WSSC.sScorm = oCurrent.version = "1.3";
		WSSC.Log.Append({ sAction: "Initialize", sStep: "start", sParam: sParam });
		API_1484_11.lastError = "201"; //General Argument Error
		if(sParam!="")
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "1", sParam: sParam, sResult: "false", iError: 201, sDesc: "Invalid parameter" });
			return "false";
		}
		API_1484_11.lastError = "103"; //Already Initialized
		if(oCurrent.state=="running")
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "2", sParam: sParam, sResult: "false", iError: 103, sDesc: "API instance already initialized" });
			return "false";
		}
		API_1484_11.lastError = "104"; //Content Instance Terminated
		if(oCurrent.state=="terminated")
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "3", sParam: sParam, sResult: "false", iError: 104, sDesc: "API instance already terminated" });
			return "false";
		}
		API_1484_11.lastError = "102"; //General Initialization Failure
		if(!oThis._GetSessionID())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "4", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: session id is not obtained" });
			return "false";
		}
		if(!oThis._GetParams())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "5", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: initial parameters are not obtained" });
			return "false";
		}
		if(oCurrent.sXHRResponse=="")
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "6", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: initial parameters are empty" });
			return "false";
		}
		if(!oThis._ParseResponse())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "7", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: error parsing initial parameters" });
			return "false";
		}
		WSSC.Time.InitSession();
		oCurrent.session_timer = 0;
		oCurrent.session_time_to_send = 0;
		oCurrent.alt_session_timer = (new Date()).valueOf();
		oCurrent.alt_session_time_to_send = 0;
		oCurrent.state = "running";
		API_1484_11.lastError = "0";
		WSSC.Log.Append({ sAction: "Initialize", sStep: "final", sParam: sParam, sResult: "true", iError: 0, sDesc: "No error" });
		return "true";
	};
	WSAPI.prototype._LMSCommit = function (LMSCoParam)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		if(oCurrent.tracking_url=="" || oCurrent.session_id=="")
		{
			WSSC.Log.Append({ sAction: "Commit", sStep: "fail1", iError: 1000, sDesc: "No URL or session_id" });
			return "false";
		}
		if(WSSC.bBeforeCommit)
		{
			WSSC.Send();
		}
		if(oThis._CallServer())
		{
			if(oThis._CheckCommited())
			{
				API_1484_11.lastError="0";
				API.lastError="0";
				if(window.g_oCP!=null)
				{
					g_oCP.UpdateInfo();
				}
				WSSC.Log.Append({ sAction: "Commit", sStep: "info", iError: 0, sDesc: "Commit succeeded" });
				if(WSSC.bAfterCommit)
				{
					WSSC.Send();
				}
				if(window.g_oCP!=null)
				{
					window.g_oCP.ShowCommentForm({ bComment: WSSC.bSendComments });
				}
				return "true";
			}
			else
			{
				API_1484_11.lastError="101";
				API.lastError="101";
				WSSC.Log.Append({ sAction: "Commit", sStep: "fail2", iError: 1000, sDesc: "Commit failed" });
				return "false";
			}
		}
		else
		{
			API.lastError="101";
			API_1484_11.lastError="101";
			WSSC.Log.Append({ sAction: "Commit", sStep: "fail3", iError: 1000, sDesc: "Calling LMS failed" });
			return "false";
		}
	};
	WSAPI.prototype._LMSFinish = function (LMSFiParam)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		if(oThis._LMSCommit()=="true")
		{
			oCurrent.tracking_url="";
			oCurrent.session_id="";
			oCurrent.state = "terminated";
			WSSC.Log.Append({ sAction: "Finish", sStep: "final", iError: 0, sDesc: "API instance terminated" });
			return true;
		}
		WSSC.Log.Append({ sAction: "Finish", sStep: "fail1", iError: 1000, sDesc: "API instance failed to terminate" });
		return false;
	};
	WSAPI.prototype._LMSGetDiagnostic = function (LMSGDparam)
	{
		var gdError;
		var returnValue="";
		if(LMSGDparam=="")
		{
			gdError = API.lastError;
		}
		else
		{
			gdError = LMSGDparam;
		}
		switch(gdError)
		{
			case "0":
				returnValue="No error encountered";
				break;
			case "101":
				if(oCurrent.comm_error!="200")
				{
					returnValue="Ошибка связи с сервером LMS. Сервер вернул ошибку номер "+oCurrent.comm_error;
				}
				else
				{
					returnValue="Ошибка возникла в ходе разбора ответа сервера. Возможно, сервер вернул данные в неправильном формате.";
				}
				break;
			case "201":
				returnValue="Курс пытается использовать неизвестный аргумент при вызове функции";
				break;
			case "202":
				returnValue="Курс пытается обратиться к несуществующим дочерним объектам элемента";
				break;
			case "203":
				returnValue="Нечего считать - элемент не является массивом.";
				break;
			case "301":
				returnValue="Сеанс установки связи с сервером LMS завершился безуспешно.";
				break;
			case "401":
				returnValue="Элемент, к которому пытается обратиться курс, не реализован в данной версии API";
				break;
			case "402":
				returnValue="Курс попытался установить неправильное значение параметра";
				break;
			case "403":
				returnValue="Курс попытался записать данные в элемент, доступный только для чтения";
				break;
			case "404":
				returnValue="Курс попытался прочитать данные из элемента, доступного только для записи";
				break;
			case "405":
				returnValue="Использован неправильный формат данных при установке значения элемента.";
				break;
			default:
				returnValue="Неизвестная ошибка";
				break;
		}
		return returnValue;
	};
	WSAPI.prototype._LMSGetErrorString = function (LMSerror)
	{ // 1.2
		var mError;
		if(LMSerror=="")
		{
			mError = API.lastError;
		}
		else
		{
			mError = LMSerror;
		}
		var returnValue="";
		var iError = parseInt(mError, 10);
		if(isNaN(iError))
		{
			iError = 0;
		}
		switch(iError)
		{
			case 0:
				returnValue="No error encountered";
				break;
			case 101:
				returnValue="General exception";
				break;
			case 102:
				returnValue="General initialization failure";
				break;
			case 103:
				returnValue="Already initialized";
				break;
			case 104:
				returnValue="Session already terminated";
				break;
			case 201:
				returnValue="Invalid argument error";
				break;
			case 202:
				returnValue="Element cannot have children";
				break;
			case 203:
				returnValue="Element is not an array - cannot have count";
				break;
			case 301:
				returnValue="Not initialized";
				break;
			case 401:
				returnValue="Not implemented error";
				break;
			case 402:
				returnValue="Invalid set value. Element is a keyword";
				break;
			case 403:
				returnValue="Element is read only";
				break;
			case 404:
				returnValue="Element is write only";
				break;
			case 405:
				returnValue="Incorrect data type";
				break;
			default:
				returnValue="Unknown error - no additional information available";
				break;
		}
		return returnValue;
	};
	WSAPI.prototype._LMSGetLastError = function ()
	{
		return oCurrent.version=="1.3" ? API_1484_11.lastError : API.lastError;
	};
	WSAPI.prototype._LMSGetValue = function (LMSGVParam)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		if(LMSGVParam==null)
		{
			WSSC.Log.Append({ sAction: "GetValue", sStep: "fail1", iError: 1000, sDesc: "Param is null" });
			return "";
		}
		var iIdx, iIdx2;
		var iIndexWS = LMSGVParam.toLowerCase().indexOf("webtutor.");
		if(iIndexWS!=-1)
		{
			var sParam = LMSGVParam.toLowerCase().substr(iIndexWS + 9);
			return (XWS[sParam]==null ? "" : XWS[sParam]);
		}
		WSSC.Log.Append({ sAction: "GetValue", sStep: "info2", sParam: LMSGVParam });
		var returnValue = "";
		API.lastError="401"; //Not implemented
		API_1484_11.lastError = "401"; //Not implemented
		if(LMSGVParam=="")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "301";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail3", sParam: LMSGVParam, iError: 301, sDesc: "Data Model Element Not Specified" });
			}
			else
			{
				API.lastError="201";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail3", sParam: LMSGVParam, iError: 201, sDesc: "Data Model Element Not Specified" });
			}
			return "";
		}
		if(oCurrent.state=="na")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "122";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail4", sParam: LMSGVParam, iError: 122, sDesc: "GetValue before initialization" });
			}
			else
			{
				API.lastError="301";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail4", sParam: LMSGVParam, iError: 301, sDesc: "GetValue before initialization" });
			}
			return "";
		}
		if(oCurrent.state=="terminated")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "123";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail5", sParam: LMSGVParam, iError: 123, sDesc: "GetValue after termination" });
			}
			else
			{
				API.lastError="101";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail5", sParam: LMSGVParam, iError: 101, sDesc: "GetValue after termination" });
			}
			return "";
		}
		if(oCurrent.state!="running")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "101";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail6", sParam: LMSGVParam, iError: 101, sDesc: "API is not in running state" });
			}
			else
			{
				API.lastError="101";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail6", sParam: LMSGVParam, iError: 101, sDesc: "API is not in running state" });
			}
			return "";
		}
		if(LMSGVParam.indexOf("adl.nav.")==0)
		{
			if(LMSGVParam=="adl.nav.request")
			{
				WSSC.Log.Append({ sAction: "GetValue", sStep: "info7", sParam: LMSGVParam, iError: 0, sResult: "_none_" });
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				return "_none_";
			}
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "402";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail8", sParam: LMSGVParam, iError: 402, sDesc: "Not implemented" });
			}
			else
			{
				API.lastError="401";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail8", sParam: LMSGVParam, iError: 401, sDesc: "Not implemented" });
			}
			return "";
		}
		var aParts = LMSGVParam.split(".");
		if(aParts[0]!="cmi")
		{
			oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
			WSSC.Log.Append({ sAction: "GetValue", sStep: "fail11", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
			return "";
		}
		if(aParts[1]=="interactions")
		{
			if(aParts.length==3)
			{
				if(aParts[2]=="_count")
				{
					returnValue = cmi.interactions.length.toString();
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ9", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				if(aParts[2]=="_children")
				{
					returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi.interactions"] : WSSC.oChildren12["cmi.interactions"];
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ10", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail11", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			iIdx = parseInt(aParts[2],10);
			if(isNaN(iIdx))
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail12", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			if(cmi.interactions[iIdx]==null)
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "403";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail13", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
				}
				else
				{
					API.lastError="201";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail13", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
				}
				return "";
			}
			if(aParts[3]=="objectives")
			{
				if(cmi.interactions[iIdx].objectives==null)
				{
					cmi.interactions[iIdx].objectives = [];
				}
				if(aParts.length==5)
				{
					if(aParts[4]=="_count")
					{
						returnValue = cmi.interactions[iIdx].objectives.length.toString();
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ14", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					if(aParts[4]=="_children")
					{
						returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi.interactions.objectives"] : WSSC.oChildren12["cmi.interactions.objectives"];
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ15", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail16", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				iIdx2 = parseInt(aParts[4], 10);
				if(isNaN(iIdx2))
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail17", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				if(cmi.interactions[iIdx].objectives[iIdx2]==null)
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail18", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
					}
					else
					{
						API.lastError="201";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail19", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
					}
					return "";
				}
				if(aParts.length>6)
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail20", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[5])
				{
					case "id":
					{
						if(cmi.interactions[iIdx].objectives[iIdx2].id==null || cmi.interactions[iIdx].objectives[iIdx2].id=="")
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "403";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail21", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							}
							else
							{
								API.lastError="201";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail22", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
							}
							return "";
						}
						returnValue = cmi.interactions[iIdx].objectives[iIdx2].id;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ23", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					default:
					{
						oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail24", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
				}
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail25", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			if(aParts[3]=="correct_responses")
			{
				if(cmi.interactions[iIdx].correct_responses==null)
				{
					cmi.interactions[iIdx].correct_responses = [];
				}
				if(aParts.length==5)
				{
					if(aParts[4]=="_count")
					{
						returnValue = cmi.interactions[iIdx].correct_responses.length.toString();
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ26", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					if(aParts[4]=="_children")
					{
						returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi.interactions.correct_responses"] : WSSC.oChildren12["cmi.interactions.correct_responses"];
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ27", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail28", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				iIdx2 = parseInt(aParts[4], 10);
				if(isNaN(iIdx2))
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail29", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				if(cmi.interactions[iIdx].correct_responses[iIdx2]==null)
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail30", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
					}
					else
					{
						API.lastError="201";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail31", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
					}
					return "";
				}
				if(aParts.length>6)
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail32", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[5])
				{
					case "pattern":
					{
						if(cmi.interactions[iIdx].correct_responses[iIdx2].pattern==null || cmi.interactions[iIdx].correct_responses[iIdx2].pattern=="")
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "403";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail33", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							}
							else
							{
								API.lastError="201";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail34", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
							}
							return "";
						}
						returnValue = cmi.interactions[iIdx].correct_responses[iIdx2].pattern;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ35", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					default:
					{
						oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail36", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
				}
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail37", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			if(aParts.length>4)
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail38", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			switch(aParts[3])
			{
				case "id":
				{
					if(cmi.interactions[iIdx].id==null || cmi.interactions[iIdx].id=="")
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail39", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail40", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.interactions[iIdx].id;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ41", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "type":
				{
					if(cmi.interactions[iIdx].type==null || cmi.interactions[iIdx].type=="")
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail42", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail43", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.interactions[iIdx].type;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ44", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "result":
				{
					if(cmi.interactions[iIdx].result==null || cmi.interactions[iIdx].result=="")
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail45", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail46", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.interactions[iIdx].result;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ47", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "weighting":
				{
					if(cmi.interactions[iIdx].weighting==null || cmi.interactions[iIdx].weighting=="")
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail48", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail49", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.interactions[iIdx].weighting;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ50", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "latency":
				{
					if(cmi.interactions[iIdx].latency==null || cmi.interactions[iIdx].latency=="")
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail51", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail52", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.interactions[iIdx].latency;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ53", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "time":
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail54", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.interactions[iIdx].time==null || cmi.interactions[iIdx].time=="")
					{
						API.lastError="201";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail55", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.interactions[iIdx].time;
					API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ56", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "timestamp":
				{
					if(oCurrent.version=="1.2")
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail57", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.interactions[iIdx].timestamp==null || cmi.interactions[iIdx].timestamp=="")
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail58", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.interactions[iIdx].timestamp;
					API_1484_11.lastError = "0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ59", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "student_response":
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail60", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.interactions[iIdx].student_response==null || cmi.interactions[iIdx].student_response=="")
					{
						API.lastError="201";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail61", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.interactions[iIdx].student_response;
					API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ62", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "learner_response":
				{
					if(oCurrent.version=="1.2")
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail63", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.interactions[iIdx].learner_response==null || cmi.interactions[iIdx].learner_response=="")
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail64", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.interactions[iIdx].learner_response;
					API_1484_11.lastError = "0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ65", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "description":
				{
					if(oCurrent.version=="1.2")
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail66", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.interactions[iIdx].description==null || cmi.interactions[iIdx].description=="")
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail67", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.interactions[iIdx].description;
					API_1484_11.lastError = "0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ68", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				default:
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail69", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
			}
			oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
			WSSC.Log.Append({ sAction: "GetValue", sStep: "fail70", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
			return "";
		}
		if(aParts[1]=="objectives")
		{
			if(aParts.length==3)
			{
				if(aParts[2]=="_count")
				{
					returnValue = cmi.objectives.length.toString();
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ71", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				if(aParts[2]=="_children")
				{
					returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi.objectives"] : WSSC.oChildren12["cmi.objectives"];
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ72", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail73", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			iIdx = parseInt(aParts[2],10);
			if(isNaN(iIdx))
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail74", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			if(cmi.objectives[iIdx]==null)
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "403";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail75", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
				}
				else
				{
					API.lastError="201";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail76", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
				}
				return "";
			}
			if(aParts[3]=="score")
			{
				if(aParts.length>5)
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail77", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[4])
				{
					case "_children":
					{
						returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi.objectives.score"] : WSSC.oChildren12["cmi.objectives.score"];
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ78", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "raw":
					{
						if(cmi.objectives[iIdx].score.raw==null)
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "403";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail79", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							}
							else
							{
								API.lastError="201";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail80", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
							}
							return "";
						}
						returnValue = cmi.objectives[iIdx].score.raw;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ81", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "max":
					{
						if(cmi.objectives[iIdx].score._max==null)
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "403";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail82", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							}
							else
							{
								API.lastError="201";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail83", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
							}
							return "";
						}
						returnValue = cmi.objectives[iIdx].score._max;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ84", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "min":
					{
						if(cmi.objectives[iIdx].score._min==null)
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "403";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail85", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							}
							else
							{
								API.lastError="201";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "fail86", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
							}
							return "";
						}
						returnValue = cmi.objectives[iIdx].score._min;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ87", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "scaled":
					{
						if(oCurrent.version=="1.2")
						{
							API.lastError="401";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail88", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
							return "";
						}
						if(cmi.objectives[iIdx].score.scaled==null)
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail89", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
							return "";
						}
						returnValue = cmi.objectives[iIdx].score.scaled;
						oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ90", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					default:
					{
						oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail91", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
				}
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail92", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			switch(aParts[3])
			{
				case "id":
				{
					if(cmi.objectives[iIdx].id==null)
					{
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "403";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail93", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						}
						else
						{
							API.lastError="201";
							WSSC.Log.Append({ sAction: "GetValue", sStep: "fail94", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						}
						return "";
					}
					returnValue = cmi.objectives[iIdx].id;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ95", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "status":
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError="401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail96", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.objectives[iIdx].status==null)
					{
						API.lastError="201";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail97", sParam: LMSGVParam, iError: 201, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.objectives[iIdx].status;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ98", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "completion_status":
				{
					if(oCurrent.version=="1.2")
					{
						API.lastError="401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail99", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.objectives[iIdx].completion_status==null)
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail100", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.objectives[iIdx].completion_status;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ101", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "success_status":
				{
					if(oCurrent.version=="1.2")
					{
						API.lastError="401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail102", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.objectives[iIdx].success_status==null)
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail103", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.objectives[iIdx].success_status;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ104", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				case "description":
				{
					if(oCurrent.version=="1.2")
					{
						API.lastError="401";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail105", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
						return "";
					}
					if(cmi.objectives[iIdx].description==null)
					{
						API_1484_11.lastError = "403";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail106", sParam: LMSGVParam, iError: 403, sDesc: "Not Initialized" });
						return "";
					}
					returnValue = cmi.objectives[iIdx].description;
					oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "succ107", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
					return returnValue;
				}
				default:
				{
					oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail108", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
			}
			oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
			WSSC.Log.Append({ sAction: "GetValue", sStep: "fail109", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
			return "";
		}
		switch(aParts[1])
		{
			case "comments_from_learner":
			case "comments_from_lms":
			case "learner_preference":
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail110", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
				return "";
			}
			case "comments":
			{
				returnValue = cmi.comments;
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ111", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
			case "student_preference":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail112", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				if(aParts.length>3)
				{
					API.lastError = "201";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail113", sParam: LMSGVParam, iError: 201, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[2])
				{
					case "_children":
					{
						returnValue = WSSC.oChildren12["cmi.student_preference"];
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ114", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "audio":
					{
						returnValue = cmi.student_preference.audio;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ115", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "language":
					{
						returnValue = cmi.student_preference.language;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ116", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "speed":
					{
						returnValue = cmi.student_preference.speed;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ117", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "text":
					{
						returnValue = cmi.student_preference._text;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ118", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
				}
				API.lastError = "201";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail119", sParam: LMSGVParam, iError: 201, sDesc: "Not recognized" });
				return "";
			}
			case "student_data":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail120", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				if(aParts.length>3)
				{
					API.lastError = "201";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail121", sParam: LMSGVParam, iError: 201, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[2])
				{
					case "_children":
					{
						returnValue = WSSC.oChildren12["cmi.student_data"];
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ122", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "mastery_score":
					{
						returnValue = cmi.student_data.mastery_score;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ123", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "max_time_allowed":
					{
						returnValue = cmi.student_data.max_time_allowed;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ124", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "time_limit_action":
					{
						returnValue = cmi.student_data.time_limit_action;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ125", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
				}
				API.lastError = "201";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail126", sParam: LMSGVParam, iError: 201, sDesc: "Not recognized" });
				return "";
			}
		}
		if(LMSGVParam.indexOf("._count")!=-1)
		{
			if(oCurrent.version=="1.3")
			{
				if(LMSGVParam!="cmi.comments_from_learner._count" && LMSGVParam!="cmi.comments_from_lms._count" && LMSGVParam!="cmi.interactions._count" && LMSGVParam.indexOf(".objectives._count")==-1 &&  LMSGVParam.indexOf(".correct_responses._count")==-1)
				{
					API_1484_11.lastError="301";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail127", sParam: LMSGVParam, iError: 301, sDesc: "Cannot have count" });
					return "";
				}
			}
			if(oCurrent.version=="1.2")
			{
				if(LMSGVParam!="cmi.interactions._count" && LMSGVParam.indexOf(".objectives._count")==-1 &&  LMSGVParam.indexOf(".correct_responses._count")==-1)
				{
					API.lastError="203";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail128", sParam: LMSGVParam, iError: 203, sDesc: "Cannot have count" });
					return "";
				}
			}
		}
		switch(aParts[1])
		{
			case "_version":
			{
				returnValue = oCurrent.version=="1.3" ? "1.0" : "3.4";
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ128", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
			case "_children":
			{
				returnValue = oCurrent.version=="1.3" ? WSSC.oChildren2004["cmi"] : WSSC.oChildren12["cmi"];
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ129", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
			case "core":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail130", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[2])
				{
					case "_children":
					{
						returnValue = WSSC.oChildren12["cmi.core"];
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ131", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "credit":
					case "entry":
					case "lesson_location":
					case "lesson_mode":
					case "lesson_status":
					case "student_id":
					case "student_name":
					{
						returnValue = cmi.core[aParts[2]];
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ132", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "score":
					{
						switch(aParts[3])
						{
							case "_children":
							{
								returnValue = WSSC.oChildren12["cmi.core.score"];
								API.lastError="0";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "succ133", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
								break;
							}
							case "raw":
							{
								returnValue = cmi.core.score.raw;
								API.lastError="0";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "succ134", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
								break;
							}
							case "max":
							{
								returnValue = cmi.core.score._max;
								API.lastError="0";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "succ135", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
								break;
							}
							case "min":
							{
								returnValue = cmi.core.score._min;
								API.lastError="0";
								WSSC.Log.Append({ sAction: "GetValue", sStep: "succ136", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
								break;
							}
						}
						return returnValue;
					}
					case "total_time":
					{
						oThis.UpdateTotalTime();
						returnValue = cmi.core.total_time;
						API.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ137", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						return returnValue;
					}
					case "exit":
					case "session_time":
					{
						API.lastError="404";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "fail138", sParam: LMSGVParam, iError: 404, sDesc: "Write-only" });
						return "";
					}
				}
				break;
			}
			case "score":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError="401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail139", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				switch(aParts[2])
				{
					case "_children":
					{
						returnValue = WSSC.oChildren2004["cmi.score"];
						API_1484_11.lastError = "0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ140", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						break;
					}
					case "raw":
					case "scaled":
					{
						returnValue = cmi.score[aParts[2]];
						API_1484_11.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ141", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						break;
					}
					case "max":
					case "min":
					{
						returnValue = cmi.score["_" + aParts[2]];
						API_1484_11.lastError="0";
						WSSC.Log.Append({ sAction: "GetValue", sStep: "succ142", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
						break;
					}
				}
				return returnValue;
			}
			case "completion_status":
			case "completion_threshold":
			case "credit":
			case "entry":
			case "learner_id":
			case "learner_name":
			case "location":
			case "max_time_allowed":
			case "mode":
			case "progress_measure":
			case "scaled_passing_score":
			case "success_status":
			case "time_limit_action":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError="401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail143", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				returnValue = cmi[aParts[1]];
				API_1484_11.lastError="0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ144", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
			case "total_time":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError="401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail145", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				oThis.UpdateTotalTime();
				returnValue = cmi.total_time;
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ146", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
			case "exit":
			case "session_time":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError="401";
					WSSC.Log.Append({ sAction: "GetValue", sStep: "fail147", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
					return "";
				}
				API_1484_11.lastError = "405";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "fail148", sParam: LMSGVParam, iError: 405, sDesc: "Write only" });
				return "";
			}
			case "launch_data":
			case "suspend_data":
			{
				returnValue = cmi[aParts[1]];
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "GetValue", sStep: "succ149", sParam: LMSGVParam, sResult: returnValue, iError: 0 });
				return returnValue;
			}
		}
		oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401"; // Not recognized element
		WSSC.Log.Append({ sAction: "GetValue", sStep: "fail150", sParam: LMSGVParam, iError: 401, sDesc: "Not recognized" });
		return "";
	};
	WSAPI.prototype._LMSInitialize = function (sParam)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		oThis.sVersion = WSSC.sScorm = oCurrent.version = "1.2";
		if(WSSC.bLog)
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "start", sParam: sParam });
		}
		API.lastError = "201"; //General Argument Error
		if(sParam!="")
		{
			if(WSSC.bLog)
			{
				WSSC.Log.Append({ sAction: "Initialize", sStep: "1", sParam: sParam, sResult: "false", iError: 201, sDesc: "Invalid parameter" });
			}
			return "false";
		}
		API.lastError = "103"; //Already Initialized
		if(oCurrent.state=="running")
		{
			if(WSSC.bLog)
			{
				WSSC.Log.Append({ sAction: "Initialize", sStep: "2", sParam: sParam, sResult: "false", iError: 103, sDesc: "API instance already initialized" });
			}
			return "false";
		}
		API.lastError = "104"; //Content Instance Terminated
		if(oCurrent.state=="terminated")
		{
			if(WSSC.bLog)
			{
				WSSC.Log.Append({ sAction: "Initialize", sStep: "3", sParam: sParam, sResult: "false", iError: 104, sDesc: "API instance already terminated" });
			}
			return "false";
		}
		API.lastError = "102"; //General Initialization Failure
		if(!oThis._GetSessionID())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "4", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: session id is not obtained" });
			return "false";
		}
		if(!oThis._GetParams())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "5", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: initial parameters are not obtained" });
			return "false";
		}
		if(oCurrent.sXHRResponse=="")
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "6", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: initial parameters are empty" });
			return "false";
		}
		if(!oThis._ParseResponse())
		{
			WSSC.Log.Append({ sAction: "Initialize", sStep: "7", sParam: sParam, sResult: "false", iError: 102, sDesc: "General Initialization Failure: error parsing initial parameters" });
			return "false";
		}
		WSSC.Time.InitSession();
		oCurrent.session_timer = 0;
		oCurrent.session_time_to_send = 0;
		oCurrent.alt_session_timer = (new Date()).valueOf();
		oCurrent.alt_session_time_to_send = 0;
		oCurrent.state = "running";
		API.lastError = "0";
		WSSC.Log.Append({ sAction: "Initialize", sStep: "final", sParam: sParam, sResult: "true", iError: 0, sDesc: "No error" });
		return "true";
	};
	WSAPI.prototype._LMSSetValue = function (LMSSVParam,LMSSSVValue)
	{
		var oThis = this;
		if(!(oThis instanceof WSAPI))
		{
			oThis = g_oWSAPI;
		}
		if(LMSSVParam==null)
		{
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail1", iError: 1000, sDesc: "Param is null" });
			return "";
		}
		if(LMSSSVValue==null)
		{
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail2", iError: 1000, sDesc: "Value is null" });
			return "";
		}
		var iIdx, iIdx2, iConverted;
		var returnValue = "false";
		WSSC.Log.Append({ sAction: "SetValue", sStep: "start", sParam: LMSSVParam, sValue: LMSSSVValue });
		API.lastError="401"; //Not implemented
		API_1484_11.lastError = "401"; //Not implemented
		if(LMSSVParam=="")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "301";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail3", iError: 301, sDesc: "Data Model Element Not Specified" });
			}
			else
			{
				API.lastError="201";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail4", iError: 201, sDesc: "Data Model Element Not Specified" });
			}
			return returnValue;
		}
		if(oCurrent.state=="na")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "132";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail5", iError: 132, sDesc: "Store data before initialization" });
			}
			else
			{
				API.lastError="301";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail6", iError: 201, sDesc: "Store data before initialization" });
			}
			return returnValue;
		}
		if(oCurrent.state=="terminated")
		{
			if(oCurrent.version=="1.3")
			{
				API_1484_11.lastError = "133";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail7", iError: 133, sDesc: "Store data after termination" });
			}
			else
			{
				API.lastError="101";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail8", iError: 101, sDesc: "Store data after termination" });
			}
			return returnValue;
		}
		if(oCurrent.state!="running")
		{
			oCurrent.version=="1.3" ? API_1484_11.lastError = "101" : API.lastError="101"; // General exception
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail9", iError: 101, sDesc: "API is not running" });
			return returnValue;
		}
		if(LMSSVParam.indexOf("adl.nav.")==0)
		{
			if(LMSSVParam=="adl.nav.request")
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ10", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return "true";
			}
			oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail11", iError: 401, sDesc: "Not recognized" });
			return returnValue;
		}
		var aParts = LMSSVParam.split(".");
		if(aParts[0]!="cmi" || aParts.length<2)
		{
			oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail12", iError: 401, sDesc: "Not recognized" });
			return returnValue;
		}
		if(LMSSVParam.indexOf("._count")!=-1)
		{
			returnValue = "false";
			oCurrent.version=="1.3" ? API_1484_11.lastError = "404" : API.lastError="403"; // Read-only element
			WSSC.Log.Append({ sAction: "SetValue", sStep: "fail12-1", iError: 401, sDesc: "Read-only element" });
			return returnValue;
		}
		switch(aParts[1])
		{
			case "interactions":
			{
				switch(aParts[2])
				{
					case "_count":
					case "_children":
					{
						if(aParts.length>3)
						{
							oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail13", iError: 401, sDesc: "Not recognized" });
							return returnValue;
						}
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "404";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail14", iError: 404, sDesc: "Read-only element" });
						}
						else
						{
							API.lastError="403";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail15", iError: 403, sDesc: "Read-only element" });
						}
						return returnValue;
					}
					default:
					{
						if(aParts.length==3)
						{
							oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail13", iError: 401, sDesc: "Not recognized" });
							return returnValue;
						}
						iIdx = parseInt(aParts[2], 10);
						if(isNaN(iIdx))
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "406";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail14", iError: 406, sDesc: "Incorrect data type" });
							}
							else
							{
								API.lastError="405";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail15", iError: 405, sDesc: "Incorrect data type" });
							}
							return returnValue;
						}
						if(cmi.interactions[iIdx]==null)
						{
							if(iIdx > cmi.interactions.length)
							{
								if(oCurrent.version=="1.3")
								{
									API_1484_11.lastError = "403";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail16", iError: 403, sDesc: "Data Model Element Value Not Initialized" });
								}
								else
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail17", iError: 405, sDesc: "Data Model Element Value Not Initialized" });
								}
								return returnValue;
							}
							if(iIdx==cmi.interactions.length)
							{
								cmi.interactions[iIdx] = {};
							}
						}
						switch(aParts[3])
						{
							case "objectives":
							{
								switch(aParts[4])
								{
									case "_count":
									case "_children":
									{
										if(aParts.length>5)
										{
											oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail18", iError: 401, sDesc: "Not recognized" });
											return returnValue;
										}
										if(oCurrent.version=="1.3")
										{
											API_1484_11.lastError = "404";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail19", iError: 404, sDesc: "Read-only element" });
										}
										else
										{
											API.lastError="403";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail20", iError: 403, sDesc: "Read-only element" });
										}
										return returnValue;
									}
									default:
									{
										iIdx2 = parseInt(aParts[4], 10);
										if(isNaN(iIdx2))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail21", iError: 406, sDesc: "Incorrect data type" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail22", iError: 405, sDesc: "Incorrect data type" });
											}
											return returnValue;
										}
										if(aParts.length>6)
										{
											oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail23", iError: 401, sDesc: "Not recognized" });
											return returnValue;
										}
										switch(aParts[5])
										{
											case "id":
											{
												if(cmi.interactions[iIdx].objectives==null)
												{
													cmi.interactions[iIdx].objectives = [];
												}
												if(cmi.interactions[iIdx].objectives[iIdx2]==null)
												{
													if(iIdx2 > cmi.interactions[iIdx].objectives.length)
													{
														if(oCurrent.version=="1.3")
														{
															API_1484_11.lastError = "403";
															WSSC.Log.Append({ sAction: "SetValue", sStep: "fail24", iError: 403, sDesc: "Data Model Element Value Not Initialized" });
														}
														else
														{
															API.lastError="405";
															WSSC.Log.Append({ sAction: "SetValue", sStep: "fail25", iError: 405, sDesc: "Data Model Element Value Not Initialized" });
														}
														return returnValue;
													}
													cmi.interactions[iIdx].objectives[iIdx2] = {};
												}
												if(typeof LMSSSVValue != "string")
												{
													if(oCurrent.version=="1.3")
													{
														API_1484_11.lastError = "406";
														WSSC.Log.Append({ sAction: "SetValue", sStep: "fail26", iError: 406, sDesc: "Type mismatch" });
													}
													else
													{
														API.lastError="405";
														WSSC.Log.Append({ sAction: "SetValue", sStep: "fail27", iError: 405, sDesc: "Type mismatch" });
													}
													return returnValue;
												}
												returnValue = "true";
												cmi.interactions[iIdx].objectives[iIdx2].id = LMSSSVValue;
												oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "succ28", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
												return returnValue;
											}
										}
										return returnValue;
									}
								}
								return returnValue;
							}
							case "correct_responses":
							{
								switch(aParts[4])
								{
									case "_count":
									case "_children":
									{
										if(aParts.length>5)
										{
											oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail29", iError: 401, sDesc: "Not recognized" });
											return returnValue;
										}
										if(oCurrent.version=="1.3")
										{
											API_1484_11.lastError = "404";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail30", iError: 404, sDesc: "Read-only element" });
										}
										else
										{
											API.lastError="403";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail31", iError: 403, sDesc: "Read-only element" });
										}
										return returnValue;
									}
									default:
									{
										iIdx2 = parseInt(aParts[4], 10);
										if(isNaN(iIdx2))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail32", iError: 406, sDesc: "Incorrect data type" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail33", iError: 405, sDesc: "Incorrect data type" });
											}
											return returnValue;
										}
										if(aParts.length>6)
										{
											oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail34", iError: 401, sDesc: "Not recognized" });
											return returnValue;
										}
										switch(aParts[5])
										{
											case "pattern":
											{
												if(cmi.interactions[iIdx].correct_responses==null)
												{
													cmi.interactions[iIdx].correct_responses = [];
												}
												if(cmi.interactions[iIdx].correct_responses[iIdx2]==null)
												{
													if(iIdx2 > cmi.interactions[iIdx].correct_responses.length)
													{
														if(oCurrent.version=="1.3")
														{
															API_1484_11.lastError = "403";
															WSSC.Log.Append({ sAction: "SetValue", sStep: "fail35", iError: 403, sDesc: "Data Model Element Value Not Initialized" });
														}
														else
														{
															API.lastError="405";
															WSSC.Log.Append({ sAction: "SetValue", sStep: "fail36", iError: 405, sDesc: "Data Model Element Value Not Initialized" });
														}
														return returnValue;
													}
													cmi.interactions[iIdx].correct_responses[iIdx2] = {};
												}
												if(typeof LMSSSVValue != "string")
												{
													if(oCurrent.version=="1.3")
													{
														API_1484_11.lastError = "406";
														WSSC.Log.Append({ sAction: "SetValue", sStep: "fail37", iError: 406, sDesc: "Type mismatch" });
													}
													else
													{
														API.lastError="405";
														WSSC.Log.Append({ sAction: "SetValue", sStep: "fail38", iError: 405, sDesc: "Type mismatch" });
													}
													return returnValue;
												}
												returnValue = "true";
												cmi.interactions[iIdx].correct_responses[iIdx2].pattern = LMSSSVValue;
												oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "succ39", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
												return returnValue;
											}
										}
										return returnValue;
									}
								}
								return returnValue;
							}
							case "id":
							{
								if(typeof LMSSSVValue != "string")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail40", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail41", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								cmi.interactions[iIdx].id = LMSSSVValue;
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ42", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "type":
							{
								if(typeof LMSSSVValue != "string")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail43", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail44", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								switch(LMSSSVValue)
								{
									case "true-false":
									case "true_false":
									case "choice":
									case "fill-in":
									case "fill_in":
									case "matching":
									case "performance":
									case "sequencing":
									case "likert":
									case "numeric":
									{
										break;
									}
									case "long-fill-in":
									case "long_fill_in":
									case "other":
									{
										if(oCurrent.version=="1.2")
										{
											returnValue = "false";
											API.lastError="405";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail45", iError: 405, sDesc: "Type mismatch" });
											return returnValue;
										}
										break;
									}
									default:
									{
										if(oCurrent.version=="1.3")
										{
											API_1484_11.lastError = "406";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail46", iError: 406, sDesc: "Type mismatch" });
										}
										else
										{
											API.lastError="405";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail47", iError: 405, sDesc: "Type mismatch" });
										}
										return returnValue;
									}
								}
								cmi.interactions[iIdx].type = LMSSSVValue;
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ48", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "result":
							{
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail49", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail50", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								if(LMSSSVValue!="correct" && LMSSSVValue!="wrong" && LMSSSVValue!="incorrect" && LMSSSVValue!="neutral" && LMSSSVValue!="unanticipated")
								{
									if(isNaN(parseFloat(LMSSSVValue)))
									{
										if(oCurrent.version=="1.3")
										{
											API_1484_11.lastError = "406";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail51", iError: 406, sDesc: "Type mismatch" });
										}
										else
										{
											API.lastError="405";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail52", iError: 405, sDesc: "Type mismatch" });
										}
										return returnValue;
									}
								}
								cmi.interactions[iIdx].result = LMSSSVValue;
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ53", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "weighting":
							{
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail54", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail55", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								if(isNaN(parseFloat(LMSSSVValue)))
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail56", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail57", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								cmi.interactions[iIdx].weighting = LMSSSVValue.toString();
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ58", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "latency":
							{
								if(typeof LMSSSVValue != "string")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail59", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail60", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								cmi.interactions[iIdx].latency = LMSSSVValue.toString();
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ61", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "time":
							{
								if(oCurrent.version=="1.3")
								{
									API_1484_11.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail62", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail63", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.interactions[iIdx].timestamp = LMSSSVValue.toString();
								returnValue = "true";
								API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ64", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "timestamp":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail65", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail66", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.interactions[iIdx].timestamp = LMSSSVValue.toString();
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ67", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "student_response":
							{
								if(oCurrent.version=="1.3")
								{
									API_1484_11.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail68", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail69", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.interactions[iIdx].learner_response = LMSSSVValue.toString();
								returnValue = "true";
								API.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ70", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "learner_response":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail71", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail72", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.interactions[iIdx].learner_response = LMSSSVValue.toString();
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ73", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "description":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail74", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail75", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.interactions[iIdx].description = LMSSSVValue.toString();
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ76", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
						}
						return returnValue;
					}
				}
				return returnValue;
			}
			case "objectives":
			{
				switch(aParts[2])
				{
					case "_count":
					case "_children":
					{
						if(aParts.length>3)
						{
							oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail77", iError: 401, sDesc: "Not recognized" });
							return returnValue;
						}
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "404";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail78", iError: 404, sDesc: "Read-only element" });
						}
						else
						{
							API.lastError="403";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail79", iError: 403, sDesc: "Read-only element" });
						}
						return returnValue;
					}
					default:
					{
						if(aParts.length==3)
						{
							oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail80", iError: 401, sDesc: "Not recognized" });
							return returnValue;
						}
						iIdx = parseInt(aParts[2], 10);
						if(isNaN(iIdx))
						{
							if(oCurrent.version=="1.3")
							{
								API_1484_11.lastError = "406";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail81", iError: 406, sDesc: "Incorrect data type" });
							}
							else
							{
								API.lastError="405";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail82", iError: 405, sDesc: "Incorrect data type" });
							}
							return returnValue;
						}
						if(cmi.objectives[iIdx]==null)
						{
							if(iIdx > cmi.objectives.length)
							{
								if(oCurrent.version=="1.3")
								{
									API_1484_11.lastError = "403";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail83", iError: 403, sDesc: "Data Model Element Value Not Initialized" });
								}
								else
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail84", iError: 405, sDesc: "Data Model Element Value Not Initialized" });
								}
								return returnValue;
							}
							if(iIdx==cmi.objectives.length)
							{
								cmi.objectives[iIdx] = {};
							}
						}
						switch(aParts[3])
						{
							case "score":
							{
								if(aParts.length>5)
								{
									oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail85", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								switch(aParts[4])
								{
									case "_children":
									{
										if(oCurrent.version=="1.3")
										{
											API_1484_11.lastError = "404";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail86", iError: 404, sDesc: "Read-only element" });
										}
										else
										{
											API.lastError="403";
											WSSC.Log.Append({ sAction: "SetValue", sStep: "fail87", iError: 403, sDesc: "Read-only element" });
										}
										return returnValue;
									}
									case "raw":
									{
										if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail88", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail89", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(isNaN(parseFloat(LMSSSVValue)))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail90", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail91", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(cmi.objectives[iIdx]==null) cmi.objectives[iIdx] = {};
										if(cmi.objectives[iIdx].score==null) cmi.objectives[iIdx].score = {};
										cmi.objectives[iIdx].score.raw = LMSSSVValue.toString();
										returnValue = "true";
										oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "succ92", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
										return returnValue;
									}
									case "max":
									{
										if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail93", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail94", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(isNaN(parseFloat(LMSSSVValue)))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail95", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail96", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(cmi.objectives[iIdx]==null)
										{
											cmi.objectives[iIdx] = {};
										}
										if(cmi.objectives[iIdx].score==null)
										{
											cmi.objectives[iIdx].score = {};
										}
										cmi.objectives[iIdx].score._max = LMSSSVValue.toString();
										returnValue = "true";
										oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "succ97", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
										return returnValue;
									}
									case "min":
									{
										if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail98", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail99", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(isNaN(parseFloat(LMSSSVValue)))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail100", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail101", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(cmi.objectives[iIdx]==null)
										{
											cmi.objectives[iIdx] = {};
										}
										if(cmi.objectives[iIdx].score==null)
										{
											cmi.objectives[iIdx].score = {};
										}
										cmi.objectives[iIdx].score._min = LMSSSVValue.toString();
										returnValue = "true";
										oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "succ102", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
										return returnValue;
									}
									case "scaled":
									{
										if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail103", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail104", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(isNaN(parseFloat(LMSSSVValue)))
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail105", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail106", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(parseFloat(LMSSSVValue)<-1 || parseFloat(LMSSSVValue)>1)
										{
											if(oCurrent.version=="1.3")
											{
												API_1484_11.lastError = "406";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail107", iError: 406, sDesc: "Type mismatch" });
											}
											else
											{
												API.lastError="405";
												WSSC.Log.Append({ sAction: "SetValue", sStep: "fail108", iError: 405, sDesc: "Type mismatch" });
											}
											return returnValue;
										}
										if(cmi.objectives[iIdx]==null)
										{
											cmi.objectives[iIdx] = {};
										}
										if(cmi.objectives[iIdx].score==null)
										{
											cmi.objectives[iIdx].score = {};
										}
										cmi.objectives[iIdx].score.scaled = LMSSSVValue.toString();
										returnValue = "true";
										oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "succ109", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
										return returnValue;
									}
								}
								return returnValue;
							}
							case "id":
							{
								if(typeof LMSSSVValue != "string")
								{
									if(oCurrent.version=="1.3")
									{
										API_1484_11.lastError = "406";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail110", iError: 406, sDesc: "Type mismatch" });
									}
									else
									{
										API.lastError="405";
										WSSC.Log.Append({ sAction: "SetValue", sStep: "fail111", iError: 405, sDesc: "Type mismatch" });
									}
									return returnValue;
								}
								cmi.objectives[iIdx].id = LMSSSVValue;
								returnValue = "true";
								oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ112", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "status":
							{
								if(oCurrent.version=="1.3")
								{
									API_1484_11.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail113", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" || LMSSSVValue=="")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail114", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(LMSSSVValue!="not attempted" && LMSSSVValue!="incomplete" && LMSSSVValue!="completed" && LMSSSVValue!="passed" && LMSSSVValue!="failed" && LMSSSVValue!="browsed")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail115", iError: 405, sDesc: "Invalid token" });
								}
								if(cmi.objectives[iIdx]==null)
								{
									cmi.objectives[iIdx] = {};
								}
								cmi.objectives[iIdx].status = LMSSSVValue;
								switch(LMSSSVValue.charAt(0))
								{
									case "p":
									case "f":
									{
										cmi.objectives[iIdx].completion_status = "completed";
										cmi.objectives[iIdx].success_status = LMSSSVValue;
										break;
									}
									default:
									{
										cmi.objectives[iIdx].success_status = "unknown";
										cmi.objectives[iIdx].completion_status = LMSSSVValue;
										break;
									}
								}
								returnValue = "true";
								API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ116", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "completion_status":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail117", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" || LMSSSVValue=="")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail118", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(LMSSSVValue!="not attempted" && LMSSSVValue!="incomplete" && LMSSSVValue!="completed" && LMSSSVValue!="unknown")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail119", iError: 406, sDesc: "Invalid token" });
									return returnValue;
								}
								if(cmi.objectives[iIdx]==null)
								{
									cmi.objectives[iIdx] = {};
								}
								cmi.objectives[iIdx].completion_status = LMSSSVValue;
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ120", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "success_status":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail121", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" || LMSSSVValue=="")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail122", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(LMSSSVValue!="unknown" && LMSSSVValue!="passed" && LMSSSVValue!="failed")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail123", iError: 406, sDesc: "Invalid token" });
									return returnValue;
								}
								if(cmi.objectives[iIdx]==null)
								{
									cmi.objectives[iIdx] = {};
								}
								cmi.objectives[iIdx].success_status = LMSSSVValue;
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ124", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "description":
							{
								if(oCurrent.version=="1.2")
								{
									API.lastError = "401";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail125", iError: 401, sDesc: "Not recognized" });
									return returnValue;
								}
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API_1484_11.lastError = "406";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail26", iError: 406, sDesc: "Type mismatch" });
									return returnValue;
								}
								cmi.objectives[iIdx].description = LMSSSVValue.toString();
								returnValue = "true";
								API_1484_11.lastError = "0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ127", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
						}
						return returnValue;
					}
				}
				return returnValue;
			}
			case "comments":
			{
				returnValue = "true";
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				cmi[aParts[1]] = LMSSSVValue;
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ128", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "comments_from_learner":
			case "student_data":
			{
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail129", iError: 401, sDesc: "Not recognized" });
				return returnValue;
			}
			case "learner_preference":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail130", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(aParts.length!=3)
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail131", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				switch(aParts[2])
				{
					case "audio_level":
					{
						cmi.student_preference.audio = LMSSSVValue;
						cmi.learner_preference.audio_level = LMSSSVValue;
						break;
					}
					case "language":
					{
						cmi.student_preference.language = LMSSSVValue;
						cmi.learner_preference.language = LMSSSVValue;
						break;
					}
					case "delivery_speed":
					{
						cmi.student_preference.speed = LMSSSVValue;
						cmi.learner_preference.delivery_speed = LMSSSVValue;
						break;
					}
					case "audio_captioning":
					{
						cmi.student_preference._text = LMSSSVValue;
						cmi.learner_preference.audio_captioning = LMSSSVValue;
						break;
					}
					default:
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail132", iError: 401, sDesc: "Not recognized" });
						return returnValue;
					}
				}
				API.lastError="0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ133", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return "true";
			}
			case "student_preference":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail134", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(aParts.length!=3)
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail135", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				switch(aParts[2])
				{
					case "audio":
					{
						cmi.student_preference.audio = LMSSSVValue;
						cmi.learner_preference.audio_level = LMSSSVValue;
						break;
					}
					case "language":
					{
						cmi.student_preference.language = LMSSSVValue;
						cmi.learner_preference.language = LMSSSVValue;
						break;
					}
					case "speed":
					{
						cmi.student_preference.speed = LMSSSVValue;
						cmi.learner_preference.delivery_speed = LMSSSVValue;
						break;
					}
					case "text":
					{
						cmi.student_preference._text = LMSSSVValue;
						cmi.learner_preference.audio_captioning = LMSSSVValue;
						break;
					}
					default:
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail136", iError: 401, sDesc: "Not recognized" });
						return returnValue;
					}
				}
				API.lastError="0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ137", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return "true";
			}
			case "_children":
			case "_version":
			case "comments_from_lms":
			case "launch_data":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "404";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail138", iError: 404, sDesc: "Read-only element" });
				}
				else
				{
					API.lastError="403";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail139", iError: 403, sDesc: "Read-only element" });
				}
				return returnValue;
			}
			case "learner_id":
			case "learner_name":
			case "credit":
			case "entry":
			case "total_time":
			case "mode":
			case "completion_threshold":
			case "max_time_allowed":
			case "scaled_passing_score":
			case "time_limit_action":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail140", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				API_1484_11.lastError = "404";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail141", iError: 404, sDesc: "Read-only element" });
				return returnValue;
			}
			case "core":
			{
				if(oCurrent.version=="1.3")
				{
					API_1484_11.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail142", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				switch(aParts[2])
				{
					case "_children":
					case "student_id":
					case "student_name":
					case "credit":
					case "entry":
					case "total_time":
					case "lesson_mode":
					{
						API.lastError = "403";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail143", iError: 403, sDesc: "Read-only element" });
						return returnValue;
					}
					case "score":
					{
						switch(aParts[3])
						{
							case "_children":
							{
								API.lastError = "403";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail144", iError: 403, sDesc: "Read-only element" });
								return returnValue;
							}
							case "raw":
							{
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail145", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(isNaN(parseFloat(LMSSSVValue)))
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail146", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(cmi.core.score==null)
								{
									cmi.core.score = {};
								}
								cmi.core.score.raw = LMSSSVValue;
								returnValue = "true";
								API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ147", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "max":
							{
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail145", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(isNaN(parseFloat(LMSSSVValue)))
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail146", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(cmi.core.score==null)
								{
									cmi.core.score = {};
								}
								cmi.core.score._max = LMSSSVValue;
								returnValue = "true";
								API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ147", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
							case "min":
							{
								if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail145", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(isNaN(parseFloat(LMSSSVValue)))
								{
									API.lastError="405";
									WSSC.Log.Append({ sAction: "SetValue", sStep: "fail146", iError: 405, sDesc: "Type mismatch" });
									return returnValue;
								}
								if(cmi.core.score==null)
								{
									cmi.core.score = {};
								}
								cmi.core.score._min = LMSSSVValue;
								returnValue = "true";
								API.lastError="0";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "succ147", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
								return returnValue;
							}
						}
						return returnValue;
					}
					case "lesson_location":
					{
						if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail148", iError: 405, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(oCurrent.strictSCORM)
						{
							if(LMSSSVValue.length>255)
							{
								API.lastError="405";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail149", iError: 405, sDesc: "Value is too long" });
								return returnValue;
							}
						}
						cmi.location = LMSSSVValue;
						cmi.core.lesson_location = LMSSSVValue;
						returnValue = "true";
						API.lastError="0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ150", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "exit":
					{
						if(typeof LMSSSVValue != "string")
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail151", iError: 405, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(oCurrent.version=="1.2")
						{
							if(LMSSSVValue!="" && LMSSSVValue!="time-out" && LMSSSVValue!="logout" && LMSSSVValue!="suspend")
							{
								API.lastError="405";
								WSSC.Log.Append({ sAction: "SetValue", sStep: "fail152", iError: 405, sDesc: "Invalid token" });
								return returnValue;
							}
						}
						cmi.core.exit = LMSSSVValue;
						returnValue = "true";
						API.lastError="0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ153", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "session_time":
					{
						if(typeof LMSSSVValue != "string")
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail154", iError: 405, sDesc: "Type mismatch" });
							return returnValue;
						}
						iConverted = ConvertCMITimespanToInteger(LMSSSVValue);
						if(LMSSSVValue=="" || LMSSSVValue.indexOf(":")==-1 || isNaN(iConverted))
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail155", iError: 405, sDesc: "Type mismatch" });
							return returnValue;
						}
						oThis.UpdateSessionTime(LMSSSVValue);
						oCurrent.bSCOSessionTime = true;
						returnValue = "true";
						API.lastError="0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ156", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "lesson_status":
					{
						if(typeof LMSSSVValue != "string")
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail157", iError: 405, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(LMSSSVValue!="not attempted" && LMSSSVValue!="incomplete" && LMSSSVValue!="completed" && LMSSSVValue!="passed" && LMSSSVValue!="failed" && LMSSSVValue!="browsed")
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail158", iError: 405, sDesc: "Invalid token" });
							return returnValue;
						}
						cmi.core.lesson_status = LMSSSVValue;
						returnValue = "true";
						API.lastError="0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ159", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
				}
				return returnValue;
			}
			case "score":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail160", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				switch(aParts[2])
				{
					case "_children":
					{
						API_1484_11.lastError = "404";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail161", iError: 404, sDesc: "Read-only element" });
						return returnValue;
					}
					case "raw":
					{
						if(typeof LMSSSVValue != "number" && typeof LMSSSVValue != "string")
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail162", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(LMSSSVValue!="" && isNaN(parseFloat(LMSSSVValue)))
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail163", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						cmi.score.raw = LMSSSVValue.toString();
						returnValue = "true";
						API_1484_11.lastError = "0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ164", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "max":
					{
						if(typeof LMSSSVValue != "number" && typeof LMSSSVValue != "string")
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail165", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(LMSSSVValue!="" && isNaN(parseFloat(LMSSSVValue)))
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail166", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						cmi.score._max = LMSSSVValue.toString();
						returnValue = "true";
						API_1484_11.lastError = "0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ167", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "min":
					{
						if(typeof LMSSSVValue != "number" && typeof LMSSSVValue != "string")
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail168", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(LMSSSVValue!="" && isNaN(parseFloat(LMSSSVValue)))
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail169", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						cmi.score._min = LMSSSVValue.toString();
						returnValue = "true";
						API_1484_11.lastError = "0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ170", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					case "scaled":
					{
						if(typeof LMSSSVValue != "number" && typeof LMSSSVValue != "string")
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail171", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(LMSSSVValue!="" && isNaN(parseFloat(LMSSSVValue)))
						{
							API_1484_11.lastError="406";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail172", iError: 406, sDesc: "Type mismatch" });
							return returnValue;
						}
						if(parseFloat(LMSSSVValue)<-1 || parseFloat(LMSSSVValue)>1)
						{
							API_1484_11.lastError="407";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail173", iError: 407, sDesc: "Out of range" });
							return returnValue;
						}
						cmi.score.scaled = LMSSSVValue.toString();
						returnValue = "true";
						API_1484_11.lastError = "0";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "succ174", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
						return returnValue;
					}
					default:
					{
						API_1484_11.lastError = "401";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail175", iError: 401, sDesc: "Not recognized" });
						return returnValue;
					}
				}
				return returnValue;
			}
			case "suspend_data":
			{
				if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
				{
					if(oCurrent.version=="1.3")
					{
						API_1484_11.lastError = "406";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail176", iError: 406, sDesc: "Type mismatch" });
					}
					else
					{
						API.lastError="405";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail177", iError: 405, sDesc: "Type mismatch" });
					}
					return returnValue;
				}
				if(oCurrent.strictSCORM)
				{
					if((oCurrent.version=="1.2" && LMSSSVValue.length>4095) || (oCurrent.version=="1.3" && LMSSSVValue.length>65535)) {
						if(oCurrent.version=="1.3")
						{
							API_1484_11.lastError = "407";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail178", iError: 407, sDesc: "Out of range" });
						}
						else
						{
							API.lastError="405";
							WSSC.Log.Append({ sAction: "SetValue", sStep: "fail179", iError: 405, sDesc: "Out of range" });
						}
						return returnValue;
					}
				}
				if(LMSSSVValue.toLowerCase().indexOf("[core_vendor]")!=-1)
				{ // SkillSoft old Snowbird engine w/a
					var sSData = LMSSSVValue.substr(LMSSSVValue.indexOf(";")+1);
					cmi.suspend_data = sSData;
					WSSC.Log.Append({ sAction: "SetValue", sStep: "info180", sDesc: "Skillsoft Snowbird detected" });
				}
				else
				{
					cmi.suspend_data = LMSSSVValue;
				}
				returnValue = "true";
				oCurrent.version=="1.3" ? API_1484_11.lastError = "0" : API.lastError="0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ181", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "location":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail182", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "string" && typeof LMSSSVValue != "number")
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail183", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(oCurrent.strictSCORM)
				{
					if(LMSSSVValue.length>1000)
					{
						API_1484_11.lastError = "407";
						WSSC.Log.Append({ sAction: "SetValue", sStep: "fail184", iError: 407, sDesc: "Out of range" });
						return returnValue;
					}
				}
				cmi.location = LMSSSVValue;
				cmi.core.lesson_location = LMSSSVValue;
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ185", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "exit":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail186", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "string")
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail187", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(LMSSSVValue!="" && LMSSSVValue!="timeout" && LMSSSVValue!="normal" && LMSSSVValue!="logout" && LMSSSVValue!="suspend")
				{
					API_1484_11.lastError = "407";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail188", iError: 407, sDesc: "Invalid token" });
					return returnValue;
				}
				cmi.exit = LMSSSVValue;
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ189", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "session_time":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail190", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "string")
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail191", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				iConverted = ConvertPeriodFromISO8601(LMSSSVValue);
				if(LMSSSVValue=="" || isNaN(iConverted))
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail192", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				oThis.UpdateSessionTime(LMSSSVValue);
				oCurrent.bSCOSessionTime = true;
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ193", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "completion_status":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail194", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "string")
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail195", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(LMSSSVValue!="not attempted" && LMSSSVValue!="incomplete" && LMSSSVValue!="completed" && LMSSSVValue!="unknown")
				{
					API_1484_11.lastError = "407";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail196", iError: 407, sDesc: "Invalid token" });
					return returnValue;
				}
				cmi.completion_status = LMSSSVValue;
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ197", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "success_status":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail198", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "string")
				{
					API_1484_11.lastError = "406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail199", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(LMSSSVValue!="unknown" && LMSSSVValue!="passed" && LMSSSVValue!="failed")
				{
					API_1484_11.lastError = "407";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail200", iError: 407, sDesc: "Invalid token" });
					return returnValue;
				}
				cmi.success_status = LMSSSVValue;
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ201", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			case "progress_measure":
			{
				if(oCurrent.version=="1.2")
				{
					API.lastError = "401";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail202", iError: 401, sDesc: "Not recognized" });
					return returnValue;
				}
				if(typeof LMSSSVValue != "number" && typeof LMSSSVValue != "string")
				{
					API_1484_11.lastError="406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail203", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(LMSSSVValue!="" && isNaN(parseFloat(LMSSSVValue)))
				{
					API_1484_11.lastError="406";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail204", iError: 406, sDesc: "Type mismatch" });
					return returnValue;
				}
				if(parseFloat(LMSSSVValue)<0 || parseFloat(LMSSSVValue)>1)
				{
					API_1484_11.lastError="407";
					WSSC.Log.Append({ sAction: "SetValue", sStep: "fail205", iError: 407, sDesc: "Out of range" });
					return returnValue;
				}
				cmi.progress_measure = LMSSSVValue.toString();
				returnValue = "true";
				API_1484_11.lastError = "0";
				WSSC.Log.Append({ sAction: "SetValue", sStep: "succ206", iError: 0, sParam: LMSSVParam, sValue: LMSSSVValue, sResult: "true" });
				return returnValue;
			}
			default:
			{
				returnValue = "false";
				oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";//Not recognized
				WSSC.Log.Append({ sAction: "SetValue", sStep: "fail207", iError: 401, sDesc: "Out of range" });
				return returnValue;
			}
		}
		returnValue = "false";
		oCurrent.version=="1.3" ? API_1484_11.lastError = "401" : API.lastError="401";//Not recognized
		WSSC.Log.Append({ sAction: "SetValue", sStep: "fail207", iError: 401, sDesc: "Out of range" });
		return returnValue;
	};
	WSAPI.prototype._ParseResponse = function (oArgs)
	{
		var i, j;
		oCurrent.sXHRResponse = unescape(oCurrent.sXHRResponse);
		var sTmp = oCurrent.sXHRResponse.toLowerCase();
		WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "start", iError: 0, sDesc: "Preparing to parse: " + oCurrent.sXHRResponse });
		if(sTmp.indexOf("error=0")==-1)
		{
			if(sTmp.indexOf("error=1")!=-1)
			{
				WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail1", iError: 1, sDesc: "Invalid server command" });
				return false;
			}
			if(sTmp.indexOf("error=2")!=-1)
			{
				WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail2", iError: 2, sDesc: "Invalid AU-password" });
				return false;
			}
			if(sTmp.indexOf("error=3")!=-1)
			{
				WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail3", iError: 3, sDesc: "Invalid session ID" });
				return false;
			}
			WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail4", iError: 1000, sDesc: "Unknown error (no ERROR=0 string found)" });
			return false;
		}
		else
		{
			var iErrTextIndex = sTmp.indexOf("error_text=");
			if(iErrTextIndex!=-1)
			{
				if(WSSC.bLog)
				{
					WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "info5", iError: 1000, sDesc: oCurrent.sXHRResponse.substr(iErrTextIndex + 11) });
				}
				else
				{
					alert(WSSC.oStrings["parse-error"] + WSSC.oStrings["support-string"] + oCurrent.sXHRResponse.substr(iErrTextIndex + 11));
				}
			}
		}
		if(oCurrent.last_command=="putparam")
		{
			WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail6", iError: 1000, sDesc: "Last command is PutParam" });
			return true;
		}
		var aParts = [];
		var aIdx = [];
		if(oCurrent.last_command=="getparam")
		{
			if(sTmp.indexOf("[core]")==-1)
			{
				WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail7", iError: 1000, sDesc: "No [CORE] section found" });
				return false;
			}
			else
			{
				aParts.push("[core]");
				aIdx.push(sTmp.indexOf("[core]"));
			}
			if(sTmp.indexOf("[core_lesson]")==-1)
			{
				WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "fail8", iError: 1000, sDesc: "No [CORE_LESSON] section found" });
				return false;
			}
			else
			{
				aParts.push("[core_lesson]");
				aIdx.push(sTmp.indexOf("[core_lesson]"));
			}
			if(sTmp.indexOf("[core_vendor]")!=-1)
			{
				aParts.push("[core_vendor]");
				aIdx.push(sTmp.indexOf("[core_vendor]"));
			}
			if(sTmp.indexOf("[evaluation]")!=-1)
			{
				aParts.push("[evaluation]");
				aIdx.push(sTmp.indexOf("[evaluation]"));
			}
			if(sTmp.indexOf("[objectives_status]")!=-1)
			{
				aParts.push("[objectives_status]");
				aIdx.push(sTmp.indexOf("[objectives_status]"));
			}
			if(sTmp.indexOf("[student_data]")!=-1)
			{
				aParts.push("[student_data]");
				aIdx.push(sTmp.indexOf("[student_data]"));
			}
			if(sTmp.indexOf("[student_demographics]")!=-1)
			{
				aParts.push("[student_demographics]");
				aIdx.push(sTmp.indexOf("[student_demographics]"));
			}
			if(sTmp.indexOf("[student_preference]")!=-1)
			{
				aParts.push("[student_preference]");
				aIdx.push(sTmp.indexOf("[student_preference]"));
			}
			if(sTmp.indexOf("[comments]")!=-1)
			{
				aParts.push("[comments]");
				aIdx.push(sTmp.indexOf("[comments]"));
			}
		}
		var aIdxSorted = [];
		for(i=0; i<aIdx.length;i++)
		{
			aIdxSorted.push(aIdx[i]);
		}
		aIdxSorted.sort(function (a,b) { return (a-b); });
		var aPartsSorted = [];
		for(i=0; i<aParts.length; i++)
		{
			for(j=0; j<aIdx.length; j++)
			{
				if(aIdx[i]==aIdxSorted[j])
				{
					aPartsSorted[j] = aParts[i];
					break;
				}
			}
		}
		var iStart, iEnd, iClosingIdx;
		var aTxt = [];
		for(i=0; i<aPartsSorted.length; i++)
		{
			iStart = sTmp.indexOf(aPartsSorted[i]) + aPartsSorted[i].length;
			if(i<aPartsSorted.length-1)
			{
				iEnd = sTmp.indexOf(aPartsSorted[i+1]);
				aTxt[aPartsSorted[i]] = oCurrent.sXHRResponse.substring(iStart,iEnd);
			}
			else
			{
				aTxt[aPartsSorted[i]] = oCurrent.sXHRResponse.substr(iStart);
			}
		}
		if(aTxt["[core_lesson]"]!=null)
		{
			cmi.suspend_data = unescape($.trim(aTxt["[core_lesson]"]));
			if(cmi.suspend_data.indexOf("B64_")==0)
			{
				iClosingIdx = cmi.suspend_data.lastIndexOf("_B64");
				if(iClosingIdx!=-1)
				{
					cmi.suspend_data = cmi.suspend_data.substring(0, iClosingIdx);
				}
				cmi.suspend_data = Base64.decode(this._UnmaskSpace({ target: cmi.suspend_data.substr(4) }));
			}
		}
		if(aTxt["[core_vendor]"]!=null)
		{
			cmi.launch_data = unescape($.trim(aTxt["[core_vendor]"]));
		}
		var sSplitter = String.fromCharCode(13,10);
		var sVName = "";
		var sVValue = "";
		var aVarPair = [];
	/**parsing core section**/
		var aVars = aTxt["[core]"].split(sSplitter);
		var iIdx = 0;
		var sTxt;
		for(i=0; i<aVars.length; i++)
		{
			iIdx = aVars[i].indexOf("=");
			sVName = aVars[i].substring(0, iIdx);
			sVValue = aVars[i].substr(iIdx+1);
			aVarPair = aVars[i].split("=");
			if(aVarPair.length>=2)
			{
				sVName = sVName.toLowerCase();
				switch(sVName)
				{
					case "student_id":
					{
						if(sVValue!="")
						{
							cmi.learner_id = sVValue;
							cmi.core.student_id = cmi.learner_id;
							XWS.student_id = sVValue;
						}
						else
						{
							cmi.learner_id = "No_Student_ID";
							cmi.core.student_id = "No_Student_ID";
						}
						break;
					}
					case "student_name":
					{
						if(sVValue!="")
						{
							cmi.core.student_name = sVValue;
							cmi.learner_name = sVValue;
							XWS.student_name = sVValue;
						}
						break;
					}
					case "lesson_location":
					{
						if(sVValue!="")
						{
							if(sVValue.indexOf("B64_")==0)
							{
								iClosingIdx = sVValue.lastIndexOf("_B64");
								if(iClosingIdx!=-1)
								{
									sVValue = sVValue.substring(0, iClosingIdx);
								}
								cmi.location = this._UnmaskSpace({ target: Base64.decode(sVValue.substr(4)) });
							}
							else
							{
								cmi.location = sVValue;
							}
						}
						else
						{
							cmi.location = "";
						}
						cmi.core.lesson_location = cmi.location;
						break;
					}
					case "lesson_mode":
					{
						sVValue = sVValue.toLowerCase();
						cmi.core.lesson_mode = "normal";
						cmi.mode = "normal";
						if(sVValue!="")
						{
							sVValue = sVValue.charAt(0);
							switch(sVValue)
							{
								case "r":
								{
									cmi.core.lesson_mode = "review";
									cmi.mode = "review";
									break;
								}
								case "b":
								{
									cmi.core.lesson_mode = "browse";
									cmi.mode = "browse";
									break;
								}
								default:
								{
									cmi.core.lesson_mode = "normal";
									cmi.mode = "normal";
									break;
								}
							}
						}
						break;
					}
					case "lesson_status":
					{
						if(sVValue!="")
						{
							sVValue = $.trim(sVValue.toLowerCase());
							if(sVValue.indexOf(",")!=-1)
							{
								var aSt = sVValue.split(",");
								this.sEntryPoint = $.trim(aSt[1]);
								this.sEntryPoint = this.sEntryPoint.charAt(0);
							}
							sVValue = sVValue.charAt(0);
							if(sVValue!="i" && sVValue!="c" && sVValue!="p"  && sVValue!="f" && sVValue!="b")
							{
								cmi.core.lesson_status = "not attempted";
								cmi.completion_status = "not attempted";
								cmi.success_status = "unknown";
								this.sEntryPoint = "a";
							}
							else
							{
								switch(sVValue)
								{
									case "i":
									{
										cmi.core.lesson_status = "incomplete";
										cmi.completion_status = "incomplete";
										cmi.success_status = "unknown";
										this.sEntryPoint = "r";
										break;
									}
									case "c":
									{
										cmi.core.lesson_status = "completed";
										cmi.completion_status = "completed";
										cmi.success_status = "unknown";
										this.sEntryPoint = "r";
										break;
									}
									case "p":
									{
										cmi.core.lesson_status = "passed";
										cmi.completion_status = "completed";
										cmi.success_status = "passed";
										this.sEntryPoint = "r";
										break;
									}
									case "f":
									{
										cmi.core.lesson_status = "failed";
										cmi.completion_status = "incomplete";
										cmi.success_status = "failed";
										this.sEntryPoint = "r";
										break;
									}
									case 'b':
									{
										cmi.core.lesson_status='browsed';
										cmi.completion_status='browsed';
										cmi.success_status = "unknown";
										this.sEntryPoint="r";
										break;
									}
									default:
									{
										cmi.core.lesson_status = "not attempted";
										cmi.completion_status = "not attempted";
										cmi.success_status = "unknown";
										this.sEntryPoint = "a";
										break;
									}
								}
							}
						}
						else
						{
							cmi.core.lesson_status = "not attempted";
							cmi.completion_status = "not attempted";
							cmi.success_status = "unknown";
							this.sEntryPoint = "a";
						}
						if(this.sEntryPoint!="")
						{
							switch(this.sEntryPoint)
							{
								case "a":
								{
									cmi.core.entry = "ab-initio";
									cmi.entry = "ab-initio";
									break;
								}
								case "r":
								{
									cmi.core.entry = "resume";
									cmi.entry = "resume";
									break;
								}
								default:
								{
									cmi.core.entry = "";
									cmi.entry = "";
									break;
								}
							}
						}
						else
						{
							cmi.core.entry = "";
							cmi.entry = "";
						}
						break;
					}
					case "credit":
					{
						sVValue = sVValue.toLowerCase();
						if(sVValue!="")
						{
							sVValue = sVValue.charAt(0);
							switch(sVValue)
							{
								case "n":
								{
									cmi.core.credit = "no-credit";
									cmi.credit = "no-credit";
									break;
								}
								case "c":
								{
									cmi.core.credit = "credit";
									cmi.credit = "credit";
									break;
								}
								default:
								{
									cmi.core.credit = "credit";
									cmi.credit = "credit";
									break;
								}
							}
						}
						else
						{
							cmi.core.credit = "credit";
							cmi.credit = "credit";
						}
						break;
					}
					case "time":
					{
						var bCMI = (sVValue.indexOf(":")!=-1);
						var bISO = (sVValue.charAt(0)=="P");
						var sCMITime = "00:00:00";
						var sISOTime = "PT0H0M0S";
						if(bCMI)
						{
							cmi.total_time = ConvertCMITimespanToISO8601(sVValue);
							cmi.core.total_time = sVValue;
							oCurrent.total_time = ConvertCMITimespanToInteger(sVValue);
							break;
						}
						if(bISO)
						{
							cmi.total_time = sVValue;
							cmi.core.total_time = ConvertISO8601ToCMITimespan(sVValue);
							oCurrent.total_time = ConvertPeriodFromISO8601(sVValue);
							break;
						}
						cmi.total_time = sISOTime;
						cmi.core.total_time = sCMITime;
						oCurrent.total_time = 0;
						break;
					}
					case "score":
					{
						var aTmpScore;
						if(sVValue!="")
						{
							if(sVValue.indexOf(",")!=-1)
							{
								aTmpScore=sVValue.split(",");
							}
							else
							{
								aTmpScore = new Array(0);
								aTmpScore[0] = sVValue;
							}
							cmi.core.score.raw = aTmpScore[0];
							cmi.score.raw = aTmpScore[0];
							if(aTmpScore.length>1)
							{
								if(aTmpScore[1]!=null)
								{
									cmi.core.score._max = aTmpScore[1];
									cmi.score._max = aTmpScore[1];
								}
								if(aTmpScore[2]!=null)
								{
									cmi.core.score._min = aTmpScore[2];
									cmi.score._min = aTmpScore[2];
								}
								if(aTmpScore[3]!=null)
								{
									cmi.score.scaled = aTmpScore[3];
								}
							}
						}
						else
						{
							cmi.core.score.raw = "";
							cmi.score.raw = "";
						}
						break;
					}
					case "student_position":
					{
						if(sVValue!="")
						{
							XWS.student_position = sVValue;
						}
						break;
					}
					case "student_code":
					{
						if(sVValue!="")
						{
							XWS.student_code = sVValue;
						}
						break;
					}
					case "student_login":
					{
						if(sVValue!="")
						{
							XWS.student_login = sVValue;
						}
						break;
					}
					case "student_email":
					{
						if(sVValue!="")
						{
							XWS.student_email = sVValue;
						}
						break;
					}
					case "student_org":
					{
						if(sVValue!="")
						{
							XWS.student_organization = sVValue;
						}
						break;
					}
					case "learning_comment":
					{
						if(sVValue!="")
						{
							XWS.learning_comment = sVValue;
						}
						break;
					}
				}
			}
		}
		/**parsing student_data section**/
		if(aTxt["[student_data]"]!=null)
		{
			sTxt = aTxt["[student_data]"];
			if(sTxt.indexOf(sSplitter)!=-1)
			{
				aVars = sTxt.split(sSplitter);
			}
			else
			{
				if(sTxt.indexOf(String.fromCharCode(10))!=-1)
				{
					aVars = sTxt.split(String.fromCharCode(10));
				}
				else
				{
					aVars = sTxt.split(String.fromCharCode(13));
				}
			}
			var aV;
			for(i=0; i<aVars.length; i++)
			{
				aVarPair = aVars[i].split("=");
				if(aVarPair.length==2)
				{
					sVName = $.trim(aVarPair[0]);
					sVValue = $.trim(aVarPair[1]);
					sVName = sVName.toLowerCase();
					switch(sVName)
					{
						case "time_limit_action":
						{
							sVValue = sVValue.toLowerCase();
							if(sVValue!="")
							{
								aV = sVValue.split(",");
								sTmp = "";
								if(aV[0].charAt(0)=="e")
								{
									sTmp += "exit,";
								}
								if(aV[0].charAt(0)=="c")
								{
									sTmp += "continue,";
								}
								if(aV.length<2)
								{
									sTmp += "no message";
								}
								else
								{
									if(aV[1].charAt(0)=="m")
									{
										sTmp += "message";
									}
									if(aV[1].charAt(0)=="n")
									{
										sTmp += "no message";
									}
								}
								cmi.time_limit_action = sTmp;
								cmi.student_data.time_limit_action = sTmp;
							}
							else
							{
								cmi.time_limit_action = "continue,no message";
								cmi.student_data.time_limit_action = "continue,no message";
							}
							break;
						}
						case "max_time_allowed":
						{
							sTmp = ConvertCMITimespanToISO8601(sVValue);
							if(sTmp!="")
							{
								cmi.max_time_allowed = sTmp;
								cmi.student_data.max_time_allowed = sVValue;
							}
							else
							{
								cmi.max_time_allowed = "";
								cmi.student_data.max_time_allowed = "";
							}
							break;
						}
						case "mastery_score":
						{
							cmi.student_data.mastery_score = (sVValue!="") ? sVValue : "";
							break;
						}
						case "scaled_passing_score":
						{
							cmi.scaled_passing_score = (sVValue!="") ? sVValue : "";
							break;
						}
						case "completion_treshold":
						{
							cmi.completion_treshold = (sVValue!="") ? sVValue : "";
							break;
						}
					}
				}
			}
		}
		/**parsing evaluation section**/
		var oCurrentNode;
		var oChildNode;
		var aChildNodes;
		if(aTxt["[evaluation]"]!=null)
		{
			aVars = aTxt["[evaluation]"].split(sSplitter);
			var iFirstRow = 0;
			for(i=0; i<aVars.length; i++)
			{
				if(aVars[i].toLowerCase().indexOf("interaction_file")==-1)
				{
					continue;
				}
				iFirstRow = i;
				break;
			}
			var bIntXML = (aTxt["[evaluation]"].indexOf("<interactions>")!=-1 && aTxt["[evaluation]"].indexOf("</interactions>")!=-1);
			if(bIntXML)
			{
				var sInteractions = aTxt["[evaluation]"].substr(aTxt["[evaluation]"].indexOf("<interactions>"));
				sInteractions = sInteractions.substring(0, sInteractions.indexOf("</interactions>")+15);
				var oIntDoc = $.parseXML(sInteractions);
				if(typeof oIntDoc == "object")
				{
					var jxRoot = $(oIntDoc).find("interactions");
					if(jxRoot.length!=0)
					{
						var sInteractionId = "";
						iIdx = 0;
						jxRoot.children("interaction").each(function ()
						{
							var j;
							var jxId = $(this).children("interaction_id");
							if(jxId.length!=0)
							{
								if(cmi.interactions[iIdx]==null)
								{
									cmi.interactions[iIdx] = {};
								}
								cmi.interactions[iIdx].id = jxId.text();

								var jxType = $(this).children("type_interaction");
								if(jxType.length!=0)
								{
									cmi.interactions[iIdx].type = jxType.text();
								}

								var jxTime = $(this).children("time");
								if(jxTime.length!=0)
								{
									cmi.interactions[iIdx].timestamp = jxTime.text();
									cmi.interactions[iIdx].time = jxTime.text();
								}

								var jxResult = $(this).children("result");
								if(jxResult.length!=0)
								{
									cmi.interactions[iIdx].result = jxResult.text();
								}

								var jxResponse = $(this).children("student_response");
								if(jxResponse.length!=0)
								{
									cmi.interactions[iIdx].learner_response = jxResponse.text();
									cmi.interactions[iIdx].student_response = jxResponse.text();
								}

								var jxWeighting = $(this).children("weighting");
								if(jxWeighting.length!=0)
								{
									cmi.interactions[iIdx].weighting = jxWeighting.text();
								}

								var jxDesc = $(this).children("description");
								if(jxDesc.length!=0)
								{
									cmi.interactions[iIdx].description = jxDesc.text();
								}

								var jxCorrects = $(this).children("correct_responses");
								if(jxCorrects.length!=0)
								{
									var jxPatterns = $(this).children("pattern");
									if(jxPatterns.length!=0)
									{
										cmi.interactions[iIdx].correct_responses = [];
										for(j=0; j<jxPatterns.length; j++)
										{
											cmi.interactions[iIdx].correct_responses.push($(jxPatterns[j]).text());
										}
									}
								}

								var jxObj = $(this).children("objectives");
								if(jxObj.length!=0)
								{
									var jxObjIds = $(this).children("objective_id");
									if(jxObjIds.length!=0)
									{
										cmi.interactions[iIdx].objectives = [];
										for(j=0; j<jxObjIds.length; j++)
										{
											cmi.interactions[iIdx].objectives.push($(jxObjIds[j]).text());
										}
									}
								}
								iIdx++;
							}
						});
					}
				}
			}
			else
			{
				var aNames = aVars[iFirstRow].toLowerCase().split('","');
				if(aNames.length>1)
				{
					aNames[0] = aNames[0].substr(1);
					aNames[aNames.length-1] = aNames[aNames.length-1].substring(0,aNames[aNames.length-1].lastIndexOf('"'));
					var k = 0;
					for(i=iFirstRow+1; i<aVars.length; i++)
					{
						if(aVars[i]=="")
						{
							continue;
						}
						aValues = aVars[i].split('","');
						if(aValues.length!=aNames.length)
						{
							break;
						}
						aValues[0] = aValues[0].substr(1);
						aValues[aValues.length-1] = aValues[aValues.length-1].substring(0,aValues[aValues.length-1].lastIndexOf('"'));
						cmi.interactions[k] = {};
						lForLoop:
						for(j=0;j<aValues.length;j++)
						{
							switch(aNames[j])
							{
								case "course_id":
								case "student_id":
								case "lesson_id":
								case "date":
								{
									continue lForLoop;
									break;
								}
								case "interaction_id":
								{
									cmi.interactions[k].id = aValues[j];
									break;
								}
								case "time":
								{
									cmi.interactions[k].timestamp = aValues[j];
									cmi.interactions[k].time = aValues[j];
									break;
								}
								case "type_interaction":
								{
									cmi.interactions[k].type = aValues[j];
									break;
								}
								case "student_response":
								{
									cmi.interactions[k].learner_response = aValues[j];
									cmi.interactions[k].student_response = aValues[j];
									break;
								}
								case "result":
								{
									cmi.interactions[k].result = aValues[j];
									break;
								}
								case "latency":
								{
									cmi.interactions[k].latency = aValues[j];
									break;
								}
								case "weighting":
								{
									cmi.interactions[k].weighting = aValues[j];
									break;
								}
								case "description":
								{
									cmi.interactions[k].description = aValues[j];
									break;
								}
								case "correct_responses":
								{
									aValues[j] = aValues[j].substring(aValues[j].indexOf("{"),aValues[j].lastIndexOf("}"));
									cmi.interactions[k].correct_responses = aValues[j].split("}{");
									break;
								}
								case "objective_id":
								{
									aValues[j] = aValues[j].substring(aValues[j].indexOf("{"),aValues[j].lastIndexOf("}"));
									cmi.interactions[k].objectives = aValues[j].split("}{");
									break;
								}
							}
						}
						k++;
					}
				}
			}
		}
		if(aTxt["[objectives_status]"]!=null)
		{
			var bObjXML = (aTxt["[objectives_status]"].indexOf("<objectives>")!=-1 && aTxt["[objectives_status]"].indexOf("</objectives>")!=-1);
			if(bObjXML)
			{
				var sObjectivesStatus = aTxt["[objectives_status]"].substr(aTxt["[objectives_status]"].indexOf("<objectives>"));
				sObjectivesStatus = sObjectivesStatus.substring(0, sObjectivesStatus.indexOf("</objectives>")+13);
				var jObjDoc = $(sObjectivesStatus);
				var jObjectives = jObjDoc.find("objective");
				var aSplitted;
				var jObjId;
				var jScore;
				var jStatus;
				var jCStatus;
				var jSStatus;
				for(i=0; i<jObjectives.length; i++)
				{
					jObjId = $(jObjectives[i]).children("objective_id");
					if(jObjId.length==0)
					{
						continue;
					}
					if(cmi.objectives[i]==null)
					{
						cmi.objectives[i] = {};
					}
					cmi.objectives[i].id = jObjId.text();
					jScore = jObjId.siblings("score");
					if(jScore.length!=0)
					{
						if(jScore.children("raw").length!=0)
						{
							cmi.objectives[i].score = { raw: jScore.children("raw").text(), min: jScore.children("min").text(), max: jScore.children("max").text() };
						}
						else if(jScore.text().indexOf(",")!=-1)
						{
							cmi.objectives[i].score = {};
							aSplitted = jScore.text().split(",");
							if(aSplitted.length==0)
							{
								cmi.objectives[i].score.raw = "";
							}
							if(aSplitted.length>0)
							{
								cmi.objectives[i].score.raw = aSplitted[0];
							}
							if(aSplitted.length>1)
							{
								cmi.objectives[i].score._max = aSplitted[1];
							}
							if(aSplitted.length>2)
							{
								cmi.objectives[i].score._min = aSplitted[2];
							}
							if(aSplitted.length>3)
							{
								cmi.objectives[i].score.scaled = aSplitted[3];
							}
						}
					}
					jStatus = jObjId.siblings("status");
					if(jStatus.length!=0)
					{
						cmi.objectives[i].status = jStatus.text();
						switch(cmi.objectives[i].status.toLowerCase().charAt(0))
						{
							case "n":
							{
								cmi.objectives[i].completion_status = "not attempted";
								cmi.objectives[i].success_status = "unknown";
								break;
							}
							case "i":
							{
								cmi.objectives[i].completion_status = "incomplete";
								cmi.objectives[i].success_status = "unknown";
								break;
							}
							case "c":
							{
								cmi.objectives[i].completion_status = "completed";
								cmi.objectives[i].success_status = "unknown";
								break;
							}
							case "p":
							{
								cmi.objectives[i].completion_status = "completed";
								cmi.objectives[i].success_status = "passed";
								break;
							}
							case "f":
							{
								cmi.objectives[i].completion_status = "completed";
								cmi.objectives[i].success_status = "failed";
								break;
							}
							default:
							{
								cmi.objectives[i].completion_status = "not attempted";
								cmi.objectives[i].success_status = "unknown";
								break;
							}
						}

					}
					jCStatus = jObjId.siblings("success_status");
					if(jCStatus.length!=0)
					{
						switch(jCStatus.text().toLowerCase().charAt(0))
						{
							case "p":
							{
								cmi.objectives[i].success_status = "passed";
								break;
							}
							case "f":
							{
								cmi.objectives[i].success_status = "failed";
								break;
							}
							case "u":
							default:
							{
								cmi.objectives[i].success_status = "unknown";
								break;
							}
						}
					}
					jSStatus = jObjId.siblings("completion_status");
					if(jSStatus.length!=0)
					{
						switch(jSStatus.text().toLowerCase().charAt(0))
						{
							case "c":
							{
								cmi.objectives[i].success_status = "completed";
								break;
							}
							case "i":
							{
								cmi.objectives[i].success_status = "incomplete";
								break;
							}
							case "n":
							default:
							{
								cmi.objectives[i].success_status = "not attempted";
								break;
							}
						}
					}
					if(jObjId.siblings("description").length!=0)
					{
						cmi.objectives[i].description = jObjId.siblings("description").text();
					}
				}
			}
			else
			{
				aVars = aTxt["[objectives_status]"].split(sSplitter);
				var aSplittedName;
				iIdx = 0;
				var aPair;
				var sParam;
				var sValue;
				var aIndex = [];
				for(i=0;i<aVars.length;i++)
				{
					if(aVars[i].indexOf("=")==-1)
					{
						continue;
					}
					aPair = aVars[i].split("=");
					if(aPair.length!=2)
					{
						continue;
					}
					sParam = $.trim(aPair[0]);
					sValue = $.trim(aPair[1]);
					aSplittedName = sParam.split(".");
					if(aSplittedName.length!=2)
					{
						continue;
					}
					sParam = aSplittedName[0];
					iIdx = parseInt(aSplittedName[1],10);
					if(isNaN(iIdx))
					{
						continue;
					}
					if(aIndex[iIdx]==null)
					{
						aIndex[iIdx] = cmi.objectives.length;
					}
					switch(sParam.toLowerCase())
					{
						case "j_id":
						{
							if(cmi.objectives[aIndex[iIdx]]==null)
							{
								cmi.objectives[aIndex[iIdx]] = {};
							}
							cmi.objectives[aIndex[iIdx]].id = sValue;
							break;
						}
						case "j_score":
						{
							if(cmi.objectives[aIndex[iIdx]]==null)
							{
								cmi.objectives[aIndex[iIdx]] = {};
							}
							cmi.objectives[aIndex[iIdx]].score = {};
							var aAttempts = sValue.split(";");
							if(aAttempts.length==0)
							{
								continue;
							}
							var aScores = aAttempts[0].split(",");
							if(aScores.length==0)
							{
								cmi.objectives[aIndex[iIdx]].score.raw = "";
							}
							if(aScores.length>0)
							{
								cmi.objectives[aIndex[iIdx]].score.raw = aScores[0];
							}
							if(aScores.length>1)
							{
								cmi.objectives[aIndex[iIdx]].score._max = aScores[1];
							}
							if(aScores.length>2)
							{
								cmi.objectives[aIndex[iIdx]].score._min = aScores[2];
							}
							if(aScores.length>3)
							{
								cmi.objectives[aIndex[iIdx]].score.scaled = aScores[3];
							}
							break;
						}
						case "j_status":
							if(cmi.objectives[aIndex[iIdx]]==null)
							{
								cmi.objectives[aIndex[iIdx]] = {};
							}
							cmi.objectives[aIndex[iIdx]].status = sValue;
							switch(sValue.toLowerCase().charAt(0))
							{
								case "n":
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "not attempted";
									cmi.objectives[aIndex[iIdx]].success_status = "unknown";
									break;
								}
								case "i":
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "incomplete";
									cmi.objectives[aIndex[iIdx]].success_status = "unknown";
									break;
								}
								case "c":
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "completed";
									cmi.objectives[aIndex[iIdx]].success_status = "unknown";
									break;
								}
								case "p":
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "completed";
									cmi.objectives[aIndex[iIdx]].success_status = "passed";
									break;
								}
								case "f":
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "completed";
									cmi.objectives[aIndex[iIdx]].success_status = "failed";
									break;
								}
								default:
								{
									cmi.objectives[aIndex[iIdx]].completion_status = "not attempted";
									cmi.objectives[aIndex[iIdx]].success_status = "unknown";
									break;
								}
							}
							break;
						case "j_description":
						{
							if(cmi.objectives[aIndex[iIdx]]==null)
							{
								cmi.objectives[aIndex[iIdx]] = {};
							}
							cmi.objectives[aIndex[iIdx]].description = sValue;
							break;
						}
					}
				}
			}
		}
		if(aTxt["[student_preference]"]!=null)
		{
			sTxt = aTxt["[student_preference]"];
			if(sTxt.indexOf(sSplitter)!=-1)
			{
				aVars = sTxt.split(sSplitter);
			}
			else
			{
				if(sTxt.indexOf(String.fromCharCode(10))!=-1)
				{
					aVars = sTxt.split(String.fromCharCode(10));
				}
				else
				{
					aVars = sTxt.split(String.fromCharCode(13));
				}
			}
			for(i=0;i<aVars.length;i++)
			{
				if(aVars[i].indexOf("=")==-1)
				{
					continue;
				}
				aVarPair = aVars[i].split("=");
				if(aVarPair.length!=2)
				{
					continue;
				}
				sVName = $.trim(aVarPair[0]);
				sVValue = $.trim(aVarPair[1]);
				switch(sVName.toLowerCase())
				{
					case "audio":
					{
						cmi.student_preference.audio = sVValue;
						cmi.learner_preference.audio_level = sVValue;
						break;
					}
					case "language":
					{
						cmi.student_preference.language = sVValue;
						cmi.learner_preference.language = sVValue;
						break;
					}
					case "speed":
					{
						cmi.student_preference.speed = sVValue;
						cmi.learner_preference.delivery_speed = sVValue;
						break;
					}
					case "text":
					{
						cmi.student_preference._text = sVValue;
						cmi.learner_preference.audio_captioning = sVValue;
						break;
					}
				}
			}
		}
		/**parsing comments section**/
		if(aTxt["[comments]"]!=null)
		{
			var sComments = $.trim(aTxt["[comments]"]);
			if(sComments=="" || sComments=="[]")
			{
				cmi.comments_from_learner = [];
			}
			else
			{
				try
				{
					cmi.comments_from_learner = JSON.parse( sComments );
				}
				catch(e)
				{
					cmi.comments_from_learner = [];
				}
			}
		}
		if(window.g_oCP!=null)
		{
			window.g_oCP.ShowCommentForm({ bComment: WSSC.bSendComments });
		}
		WSSC.Log.Append({ sAction: "Initialize -> ParseResponse", sStep: "final", iError: 0, sDesc: "Params parsed" });
		return true;
	};
	WSAPI.prototype._TranslateEvaluation = function ()
	{
		if(cmi.interactions.length==0)
		{
			return "";
		}
		var i, j;
		var sCRLF = String.fromCharCode(13,10);
		var sData = '"time","interaction_id","objective_id","type_interaction","correct_response","student_response","result","weighting","latency","description"';
		for(i=0;i<cmi.interactions.length;i++)
		{
			sData += sCRLF;
			sData += '"';
			sData += cmi.interactions[i].timestamp!=null ? cmi.interactions[i].timestamp : "";
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].id!=null ? cmi.interactions[i].id : "";
			sData += '",';
			sData += '"';
			if(cmi.interactions[i].objectives!=null)
			{
				if(cmi.interactions[i].objectives.length!=0)
				{
					sData += '{';
					for(j=0;j<cmi.interactions[i].objectives.length;j++)
					{
						sData += cmi.interactions[i].objectives[j].id;
						if(cmi.interactions[i].objectives[j+1]==null)
						{
							break;
						}
						sData += '},{';
					}
					sData += '}';
				}
			}
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].type!=null ? cmi.interactions[i].type : "";
			sData += '",';
			sData += '"';
			if(cmi.interactions[i].correct_responses!=null)
			{
				if(cmi.interactions[i].correct_responses.length!=0)
				{
					sData += '{';
					for(j=0;j<cmi.interactions[i].correct_responses.length;j++)
					{
						sData += cmi.interactions[i].correct_responses[j].pattern;
						if(cmi.interactions[i].correct_responses[j+1]==null)
						{
							break;
						}
						sData += '},{';
					}
					sData += '}';
				}
			}
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].learner_response!=null ? cmi.interactions[i].learner_response : "";
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].result!=null ? cmi.interactions[i].result : "";
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].weighting!=null ? cmi.interactions[i].weighting : "";
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].latency!=null ? cmi.interactions[i].latency : "";
			sData += '",';
			sData += '"';
			sData += cmi.interactions[i].description!=null ? cmi.interactions[i].description : "";
			sData += '"';
		}
		return sData;
	};
	WSAPI.prototype._TranslateEvaluationXML = function ()
	{
		if(cmi.interactions.length==0)
		{
			return "";
		}
		var oDoc = $.parseXML("<interactions></interactions>");
		var jxRoot = $(oDoc).find("interactions");
		var jxInteraction;
		var jxObjectives;
		var jxCorrects;
		var i, j;
		for(i=0; i<cmi.interactions.length; i++)
		{
			jxInteraction = $(oDoc.createElement("interaction")).appendTo(jxRoot);
			$(oDoc.createElement("interaction_id")).appendTo(jxInteraction).text(cmi.interactions[i].id);
			$(oDoc.createElement("type_interaction")).appendTo(jxInteraction).text(cmi.interactions[i].type);
			if(cmi.interactions[i].timestamp!=null)
			{
				$(oDoc.createElement("time")).appendTo(jxInteraction).text(cmi.interactions[i].timestamp);
			}
			if(cmi.interactions[i].latency!=null)
			{
				$(oDoc.createElement("latency")).appendTo(jxInteraction).text(cmi.interactions[i].latency);
			}
			if(cmi.interactions[i].result!=null)
			{
				$(oDoc.createElement("result")).appendTo(jxInteraction).text(cmi.interactions[i].result);
			}
			if(cmi.interactions[i].weighting!=null)
			{
				$(oDoc.createElement("weighting")).appendTo(jxInteraction).text(cmi.interactions[i].weighting);
			}
			if(cmi.interactions[i].description!=null)
			{
				$(oDoc.createElement("description")).appendTo(jxInteraction).text(cmi.interactions[i].description);
			}
			if(cmi.interactions[i].learner_response!=null)
			{
				$(oDoc.createElement("student_response")).appendTo(jxInteraction).text(cmi.interactions[i].learner_response);
			}
			if(cmi.interactions[i].objectives!=null && cmi.interactions[i].objectives.length>0)
			{
				jxObjectives = $(oDoc.createElement("objectives")).appendTo(jxInteraction);
				for(j=0; j<cmi.interactions[i].objectives.length; j++)
				{
					$(oDoc.createElement("objective_id")).appendTo(jxObjectives).text(cmi.interactions[i].objectives[j].id);
				}
			}
			if(cmi.interactions[i].correct_responses!=null && cmi.interactions[i].correct_responses.length>0)
			{
				jxCorrects = $(oDoc.createElement("correct_responses")).appendTo(jxInteraction);
				for(j=0; j<cmi.interactions[i].correct_responses.length; j++)
				{
					$(oDoc.createElement("pattern")).appendTo(jxCorrects).text(cmi.interactions[i].correct_responses[j].pattern);
				}
			}
		}
		return escape((new XMLSerializer()).serializeToString(oDoc));
	};
	WSAPI.prototype._TranslateObjectives = function()
	{
		if(cmi.objectives.length==0)
		{
			return "";
		}
		var sCRLF = String.fromCharCode(13,10);
		var sData = '"objective_id","score","status","completion_status","success_status","description"';
		for(var i=0;i<cmi.objectives.length;i++)
		{
			sData += sCRLF;
			sData += '"';
			sData += cmi.objectives[i].id!=null ? cmi.objectives[i].id : "";
			sData += '",';
			sData += '"';
			if(cmi.objectives[i].score!=null)
			{
				sData += cmi.objectives[i].score.raw!=null ? cmi.objectives[i].score.raw.toString() : "";
				sData += ',';
				sData += cmi.objectives[i].score._max!=null ? cmi.objectives[i].score._max.toString() : "";
				sData += ',';
				sData += cmi.objectives[i].score._min!=null ? cmi.objectives[i].score._min.toString() : "";
				if(oCurrent.version=="1.3")
				{
					sData += ',';
					sData += cmi.objectives[i].score.scaled!=null ? cmi.objectives[i].score.scaled.toString() : "";
				}
			}
			sData += '",';
			sData += '"';
			sData += cmi.objectives[i].status!=null ? cmi.objectives[i].status : "";
			sData += '",';
			sData += '"';
			sData += cmi.objectives[i].completion_status!=null ? cmi.objectives[i].completion_status : "";
			sData += '",';
			sData += '"';
			sData += cmi.objectives[i].success_status!=null ? cmi.objectives[i].success_status : "";
			sData += '",';
			sData += '"';
			sData += cmi.objectives[i].description!=null ? cmi.objectives[i].description : "";
			sData += '"';
		}
		return sData;
	};
	WSAPI.prototype._TranslateObjectivesXML = function ()
	{
		if(cmi.objectives.length==0)
		{
			return "";
		}
		var oDoc = $.parseXML("<objectives></objectives>");
		var jxRoot = $(oDoc).find("objectives");
		var jxObj;
		var jxScore;
		var sTmp;
		for(var i=0; i<cmi.objectives.length; i++)
		{
			if(cmi.objectives[i].id==null)
			{
				continue;
			}
			jxObj = $(oDoc.createElement("objective")).appendTo(jxRoot);
			$(oDoc.createElement("objective_id")).appendTo(jxObj).text(cmi.objectives[i].id);
			sTmp = "not attempted";
			if(cmi.objectives[i].success_status!=null || cmi.objectives[i].completion_status!=null)
			{
				if(cmi.objectives[i].success_status!=null)
				{
					switch(cmi.objectives[i].success_status.charAt(0))
					{
						case "p":
						case "f":
							sTmp = cmi.objectives[i].success_status;
							break;
						default:
							sTmp = (cmi.objectives[i].completion_status!=null) ? cmi.objectives[i].completion_status : "not attempted";
							break;
					}
				}
				else
				{
					sTmp = cmi.objectives[i].completion_status;
				}
			}
			$(oDoc.createElement("status")).appendTo(jxObj).text(sTmp);
			$(oDoc.createElement("success_status")).appendTo(jxObj).text((cmi.objectives[i].success_status!=null) ? cmi.objectives[i].success_status : "unknown");
			$(oDoc.createElement("completion_status")).appendTo(jxObj).text((cmi.objectives[i].completion_status!=null) ? cmi.objectives[i].completion_status : "not attempted");
			if(cmi.objectives[i].description!=null)
			{
				$(oDoc.createElement("description")).appendTo(jxObj).text(cmi.objectives[i].description);
			}
			jxScore = $(oDoc.createElement("score")).appendTo(jxObj);
			if(cmi.objectives[i].score!=null)
			{
				$(oDoc.createElement("min")).appendTo(jxScore).text((cmi.objectives[i].score.raw!=null) ? cmi.objectives[i].score.raw : "0");
				if(cmi.objectives[i].score._min!=null)
				{
					$(oDoc.createElement("raw")).appendTo(jxScore).text(cmi.objectives[i].score._min);
				}
				if(cmi.objectives[i].score._max!=null)
				{
					$(oDoc.createElement("max")).appendTo(jxScore).text(cmi.objectives[i].score._max);
				}
				if(cmi.objectives[i].score.scaled!=null)
				{
					$(oDoc.createElement("scaled")).appendTo(jxScore).text(cmi.objectives[i].score.scaled);
				}
			}
		}
		return escape((new XMLSerializer()).serializeToString(oDoc));
	};
	WSAPI.prototype.Constructor = function (oArgs)
	{
		var oThis = this;
		this.bIEInCompatibilityMode = this._CheckIE();
		setTimeout(function () { $(document).ready(oThis.LoadStrings); }, 100);
		return this;
	};
	WSAPI.prototype.LoadStrings = function (oArgs)
	{
		var oThis = this;
		$.ajax(
		{
			type: "GET",
			async: true,
			url: "/scorm_api_strings.html",
			dataType: "json",
			success: function (oResponse)
			{
				var oData = oResponse;
				if(typeof oData != "object")
				{
					oData = JSON.parse(oResponse);
				}
				if(typeof oData != "object")
				{
					return false;
				}
				oThis.oStrings = JSON.parse(JSON.stringify(oData));
				oThis.bStringsLoaded = true;
				return true;
			},
			complete: function (jqXHR, sStatus)
			{
				return true;
			},
			failure: function ()
			{
				return false;
			}
		});
		return this;
	};
	WSAPI.prototype.Request = function (oArgs)
	{
		var oThis = this;
		var sData = oArgs.sData;
		var bAsync = !(oArgs.bSync==true);
		$.ajax(
		{
			type: "POST",
			url: oCurrent.tracking_url,
			async: bAsync,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			data: sData,
			dataType: "text",
			complete: function (jqXHR, sStatus)
			{

				return false;
			},
			error: function (jqXHR, sStatus, sStatusString)
			{

				return false;
			},
			success: function (sData, sStatus, jqXHR)
			{

				return true;
			}
		});
		return this;
	};
	WSAPI.prototype.ResetAPI = function (oArgs)
	{
		WSSC.Log.Clear();
		API.session_id = "";
		API.tracking_url = "";

		oCurrent.state = "na";
		oCurrent.errorlevel = "low";
		oCurrent.version = "";
		oCurrent.error = "0";
		oCurrent.debug = false;
		oCurrent.last_command = "";
		oCurrent.comm_error = "200";
		oCurrent.session_id = "";
		oCurrent.tracking_url = "";
		oCurrent.sXHRResponse = "";
		oCurrent.strictWSAPI = false;
		oCurrent.command_log = false;
		oCurrent.setvalue_log = "";
		oCurrent.getvalue_log = "";
		oCurrent.sendtype = "xml"; // "xml" to send interactions and objectives as XML, any other - CSV table
		oCurrent.session_timer = 0;
		oCurrent.session_time_to_send = 0;
		oCurrent.enable_API_session_time = false;
		oCurrent.alt_session_timer = 0;
		oCurrent.alt_session_time_to_send = 0;
		oCurrent.bSCOSessionTime = false;

		XWS =
		{
			learning_comment: "",
			student_id: "",
			student_name: "",
			student_position: "",
			student_organization: "",
			student_login: "",
			student_email: "",
			student_code: ""
		};
		//=== WSAPI common values =====

		cmi =
		{
			_version: "0",
			comments_from_lms: [],
			comments_from_learner: [],
			completion_status: "unknown",
			completion_threshold: "",
			credit: "credit",
			entry: "resume",
			exit: "",
			interactions: [],
			launch_data: "",
			learner_id: "0",
			learner_name: "Unknown_Student",
			learner_preference:
			{
				audio_level: "",
				language: "",
				delivery_speed: "",
				audio_captioning: ""
			},
			location: "",
			max_time_allowed: "",
			mode: "normal",
			objectives: [],
			progress_measure: "",
			scaled_passing_score: "",
			score:
			{
				raw: "",
				_min: "",
				_max: "",
				scaled: ""
			},
			session_time: "PT0H0M0S",
			success_status: "unknown",
			suspend_data: "",
			time_limit_action: "continue,no message",
			total_time: "PT0H0M0S",
			core:
			{
				student_id: "0",
				student_name: "Unknown_Student",
				lesson_location: "",
				lesson_status: "",
				lesson_mode: "",
				entry: "resume",
				credit: "credit",
				total_time: "PT0H0M0S",
				session_time: "PT0H0M0S",
				exit: "",
				score:
				{
					raw: "",
					_min: "",
					_max: ""
				}
			},
			comments: "",
			_comments_from_lms: "",
			student_data:
			{
				mastery_score: "",
				max_time_allowed: "",
				time_limit_action: ""
			},
			student_preference:
			{
				audio: "",
				language: "",
				speed: "",
				_text: ""
			}
		};
		return this;
	};
	WSAPI.prototype.SubmitComment = function (oArgs)
	{
		if(oArgs!=null)
		{
			if(oArgs.sComment!=null && oArgs.sComment!="")
			{
				var iIdx = cmi.comments_from_learner.length;
				cmi.comments_from_learner[iIdx] =
				{
					location: ((oCurrent.version=="1.3") ? cmi.location : cmi.core.lesson_location),
					timestamp: ConvertDateToISO8601(new Date()),
					comment: oArgs.sComment
				};
				WSSC.Send({ sComment: oArgs.sComment });
				return true;
			}
		}
		return this;
	};
	WSAPI.prototype.UpdateSessionTime = function (sValue)
	{
		var iSessionTime = (oCurrent.version=="1.2") ? ConvertCMITimespanToInteger(sValue) : ConvertPeriodFromISO8601(sValue);
		if(isNaN(iSessionTime))
		{
			iSessionTime = 0;
		}
		var iTotalTime = ConvertPeriodFromISO8601(cmi.total_time);
		iSessionTime += iTotalTime;
		cmi.session_time = ConvertPeriodToISO8601(iSessionTime);
		cmi.core.session_time = ConvertIntegerToCMITimespan(iSessionTime);
		oCurrent.session_time_to_send = iSessionTime;
		var dNow = new Date();
		var iNow = dNow.valueOf();
		oCurrent.alt_session_time_to_send = iNow - oCurrent.alt_session_timer;
		return this;
	};
	WSAPI.prototype.UpdateTotalTime = function ()
	{
		var iTotalTime = ConvertPeriodFromISO8601(cmi.total_time);
		var iSessionTime = ConvertPeriodFromISO8601(cmi.session_time);
		iTotalTime += iSessionTime;
		iSessionTime = 0;
		cmi.total_time = ConvertPeriodToISO8601(iTotalTime);
		cmi.core.total_time = ConvertIntegerToCMITimespan(iTotalTime);
		cmi.session_time = ConvertPeriodToISO8601(iSessionTime);
		cmi.core.session_time = ConvertIntegerToCMITimespan(iSessionTime);
		return this;
	};

}

/* start sequence */
var g_oWSAPI = (new WSAPI()).ResetAPI();

/* compatibility list for possible legacy external calls */
var ResetAPI = g_oWSAPI.ResetAPI;
var SubmitComment = g_oWSAPI.SubmitComment;
var GetSessionID = g_oWSAPI._GetSessionID;
var GetParams = g_oWSAPI._GetParams;
var ParseResponse = g_oWSAPI._ParseResponse;
var UpdateTotalTime = g_oWSAPI.UpdateTotalTime;
var UpdateSessionTime = g_oWSAPI.UpdateSessionTime;
var CreateCommitData = g_oWSAPI._CreateCommitData;
var TranslateEvaluation = g_oWSAPI._TranslateEvaluation;
var TranslateEvaluationXML = g_oWSAPI._TranslateEvaluationXML;
var TranslateObjectives = g_oWSAPI._TranslateObjectives;
var TranslateObjectivesXML = g_oWSAPI._TranslateObjectivesXML;

// Trim extended
function Trim(sString, bStartSpace, bEndSpace, bDoubleSpace, bEnter)
{
	if(typeof sString != "string")
	{
		return sString;
	}
	var bStart = (bStartSpace!=false);
	var bEnd = (bEndSpace!=false);
	var bDblSpc = (bDoubleSpace!=false);
	var bCRLF = (bEnter!=false);
	var sReturn = sString;
	var sChar;
	if(bStart)
	{
		sChar = sReturn.substring(0, 1);
		while (sChar==" " || sChar=="\n" || sChar=="\r" || sChar=="\t")
		{
			sReturn = sReturn.substring(1, sReturn.length);
			sChar = sReturn.substring(0, 1);
		}
	}
	if(bEnd)
	{
   		sChar = sReturn.substring(sReturn.length-1, sReturn.length);
		while (sChar==" " || sChar=="\n" || sChar=="\r" || sChar=="\t")
		{
			sReturn = sReturn.substring(0, sReturn.length-1);
			sChar = sReturn.substring(sReturn.length-1, sReturn.length);
		}
	}
	if(bCRLF)
	{
		while (sReturn.indexOf("\n") != -1)
		{
			sReturn = sReturn.substring(0, sReturn.indexOf("\n")) +" "+ sReturn.substring(sReturn.indexOf("\n")+1, sReturn.length);
		}
		while (sReturn.indexOf("\r") != -1)
		{
			sReturn = sReturn.substring(0, sReturn.indexOf("\r")) + sReturn.substring(sReturn.indexOf("\r")+1, sReturn.length);
		}
		while (sReturn.indexOf("\t") != -1)
		{
			sReturn = sReturn.substring(0, sReturn.indexOf("\t")) + sReturn.substring(sReturn.indexOf("\t")+1, sReturn.length);
		}
	}
	if(bDblSpc)
	{
		while (sReturn.indexOf("  ") != -1)
		{
			sReturn = sReturn.substring(0, sReturn.indexOf("  ")) + sReturn.substring(sReturn.indexOf("  ")+1, sReturn.length);
		}
	}
	return sReturn;
}

// FormatReal_10_7
function FormatReal_10_7(param)
{
	if(param == null) return null;
	if(typeof param != "number")
	{
		var rArg = parseFloat(param);
		if(isNaN(rArg)) return null;
	}
	else
	{
		var rArg = param;
	}
	var sSign = rArg<0 ? "-" : "";
	rArg = Math.abs(rArg);
	var sArg = rArg.toString();
	if(sArg.indexOf("e")==-1)
	{
		if(sArg.indexOf(".")!=-1 && sArg.length<=8) return sSign+sArg;
		if(sArg.indexOf(".")==-1 && sArg.length<=7) return sSign+sArg;
		if(sArg.indexOf(".")!=-1 && sArg.length>8)
		{
			var aParts = sArg.split(".");
			if(aParts[0].length>7)
			{
				return sSign+aParts[0];
			}
			else
			{
				var iL = 8 - aParts[0].length;
				return sSign+aParts[0]+"."+aParts[1].substring(0,iL);
			}
			return sSign+sArg;
		}
		if(Math.abs(rArg)<0.5e-7) return "0";
	}
	return false;
}

// ConvertCMITimespanToInteger
function ConvertCMITimespanToInteger(sTimespan)
{
	if(sTimespan==null || sTimespan=="") return 0;
	var aParts = sTimespan.split(":");
	var iH = 0;
	var iM = 0;
	var nS = 0;
	if(aParts.length==3)
	{
		iH = parseInt(aParts[0],10);
		if(isNaN(iH)) iH = 0;
		iH = iH * 3600000;
		iM = parseInt(aParts[1],10);
		if(isNaN(iM)) iM = 0;
		iM = iM * 60000;
		nS = parseFloat(aParts[2]);
		if(isNaN(nS)) nS = 0;
		nS = Math.round(nS * 1000);
	}
	if(aParts.length==2)
	{
		iM = parseInt(aParts[0],10);
		if(isNaN(iM)) iM = 0;
		iM = iM * 60000;
		nS = parseFloat(aParts[1]);
		if(isNaN(nS)) nS = 0;
		nS = Math.round(nS * 1000);
	}
	return iH + iM + nS;
}

// ConvertIntegerToCMITimespan
function ConvertIntegerToCMITimespan(iInterval)
{
	var iValue = Math.round(iInterval/1000);
	var iH = 0;
	var iM = 0;
	var sH = "00";
	var sM = "00";
	var sS = "";
	if(iValue>3599)
	{
		iH = Math.floor(iValue/3600);
		iValue = iValue - iH * 3600;
		sH = iH.toString();
		if(sH.length==1) sH = "0" + sH;
	}
	if(iValue>59)
	{
		iM = Math.floor(iValue/60);
		iValue = iValue - iM * 60;
		sM = iM.toString();
		if(sM.length==1) sM = "0" + sM;
	}
	sS = iValue.toString();
	if(sS.length==1) sS = "0" + sS;
	return sH + ":" + sM + ":" + sS;
}

// ConvertCMITimespanToISO8601
function ConvertCMITimespanToISO8601(sTimespan)
{
	if(sTimespan==null || sTimespan=="") return "";
	var aParts = sTimespan.split(":");
	var iD = 0;
	var iH = 0;
	var iM = 0;
	var iS = 0;
	if(aParts.length==3)
	{
		iH = parseInt(aParts[0],10);
		if(iH>23)
		{
			iD = Math.floor(iH/24);
			iH = iH - iD*24;
		}
		iM = parseInt(aParts[1],10);
		iS = parseInt(aParts[2],10);
	}
	if(aParts.length==2)
	{
		iM = parseInt(aParts[0],10);
		iS = parseInt(aParts[1],10);
	}
	var sResult = iD==0 ? "PT" : "P"+iD.toString()+"DT";
	sResult += iH.toString()+"H"+iM.toString()+"M"+iS.toString()+"S";
	return sResult;
}

// ConvertISO8601ToCMITimespan
function ConvertISO8601ToCMITimespan(sPeriod)
{
	if(sPeriod==null || sPeriod=="") return "";
	var sValue = Trim(sPeriod);
	sValue = sValue.toUpperCase();
	var regDec = new RegExp("\\d+","g");
	var regNonDec = new RegExp("\\D","g");
	var aNums = sValue.match(regDec);
	var aLetters = sValue.match(regNonDec);
	if(aLetters[0]!="P") return "";
	var bTime = false;
	var iIndx = -1;
	var sResult = "";
	var iH,iM,iS = 0;
	for(var i=1;i<aLetters.length;i++)
	{
		if(aLetters[i]=="T")
		{
			bTime = true;
			continue;
		}
		switch(aLetters[i])
		{
			case "Y":	iIndx++;	iH += 8760*parseInt(aNums[iIndx],10); 	break;
			case "M":	iIndx++; 	bTime ? iM = parseInt(aNums[iIndx],10) : iH += 720*parseInt(aNums[iIndx],10);		break;
			case "D":	iIndx++;	iH += 24*parseInt(aNums[iIndx],10);		break;
			case "H":	iIndx++;	iH += parseInt(aNums[iIndx],10);		break;
			case "S":	iIndx++;	iS = parseInt(aNums[iIndx],10); 		break;
			default:	break;
		}
	}
	var sH = iH.toString();
	if(sH.length==1) sH = "0"+sH;
	var sM = iM.toString();
	if(sM.length==1) sM = "0"+sM;
	var sH = iS.toString();
	if(sS.length==1) sS = "0"+sS;
	var sResult = sH+":"+sM+":"+sS;
	return sResult;
}

// ConvertDateToISO8601
function ConvertDateToISO8601(dDate, bMS)
{
	var sValue = dDate.getUTCFullYear() + "-";

	var sMonth = (dDate.getUTCMonth() + 1).toString();
	if(sMonth.length==1) sMonth = "0" + sMonth;
	sValue += sMonth + "-";

	var sDate = dDate.getUTCDate().toString();
	if(sDate.length==1) sDate = "0" + sDate;
	sValue += sDate + "T";

	var sH = dDate.getUTCHours().toString();
	if(sH.length==1) sH = "0" + sH;
	sValue += sH + ":";

	var sM = dDate.getUTCMinutes().toString();
	if(sM.length==1) sM = "0" + sM;
	sValue += sM + ":";

	var sS = dDate.getUTCSeconds().toString();
	if(sS.length==1) sS = "0" + sS;
	sValue += sS;

	if(bMS==true)
	{
		var sMS = dDate.getUTCMilliseconds().toString();
		if(sMS.length!=3)
		{
			if(sMS.length==1) sMS = "00" + sMS;
			if(sMS.length==2) sMS = "0" + sMS;
		}
		sValue += "." + sMS;
	}
	sValue += "Z";
	return sValue;
}

// ConvertPeriodToISO8601
function ConvertPeriodToISO8601(iTime)
{
	if(isNaN(iTime)) return null;
	var iValue = Math.round(iTime/1000);
	var iDays = 0;
	var iHours = 0;
	var iMin = 0;
	var iSec = 0;
	if(iValue > 86399) {	iDays = Math.floor(iValue/86400);	iValue = iValue - 86400*iDays;	}
	if(iValue > 3599) {		iHours = Math.floor(iValue/3600);	iValue = iValue - 3600*iHours;	}
	if(iValue > 59) {		iMin = Math.floor(iValue/60);		iValue = iValue - 60*iMin;		}
	iSec = iValue;
	var sValue = "P";
	if(iDays != 0) sValue += iDays.toString()+"D";
	sValue += "T" + iHours.toString() + "H" + iMin.toString() + "M" + iSec.toString() + "S";
	return sValue;
}

// ConvertPeriodFromISO8601
function ConvertPeriodFromISO8601(sPeriod)
{
	var sValue = Trim(sPeriod,true,true,true,true);
	sValue = sValue.toUpperCase();
	var regDec = new RegExp("\\d+","g");
	var regNonDec = new RegExp("\\D","g");
	var aNums = sValue.match(regDec);
	var aLetters = sValue.match(regNonDec);
	if(aLetters[0]!="P") return null;
	var iValue = 0;
	var iMod = 0;
	var bTime = false;
	var iIndx = -1;
	var sTmp = "-";
	for(var i=1;i<aLetters.length;i++)
	{
		if(aLetters[i]=="T")
		{
			bTime = true;
			continue;
		}
		switch(aLetters[i])
		{
			case "Y":	iIndx++;	iValue += parseInt(aNums[iIndx],10)*977616000000; 	break;
			case "M":
				iIndx++;
				if(bTime)
				{
					iValue += parseInt(aNums[iIndx],10)*60000;
				}
				else
				{
					iValue += parseInt(aNums[iIndx],10)*2678400000;
				}
				break;
			case "D":	iIndx++; 	iValue += parseInt(aNums[iIndx],10)*86400000; 		break;
			case "H":	iIndx++; 	iValue += parseInt(aNums[iIndx],10)*3600000; 		break;
			case ".":	iIndx++;	sTmp = aNums[iIndx]; 								break;
			case "S":
				iIndx++;
				if(sTmp=="-")
				{
					iValue += parseInt(aNums[iIndx],10)*1000;
					break;
				}
				else
				{
					sTmp += "."+aNums[iIndx];
					iValue += parseFloat(sTmp)*1000;
				}
				break;
			default:	iMod = 0;			break;
		}
	}
	return iValue;
}

// ConvertPeriodToString
function ConvertPeriodToString(iInterval)
{
	var iValue = Math.round(iInterval/1000);
	var sOutput = "";
	var iT = 0;
	var sT = "";
	if(iValue>86399)
	{
		iT = Math.floor(iValue/86400);
		iValue = iValue - iT*86400;
		sOutput += iT.toString() + g_sDaysString;
	}
	if(iValue>3599)
	{
		iT = Math.floor(iValue/3600);
		iValue = iValue - iT*3600;
		sT = iT.toString();
		if(sT.length==1) sT = "0"+sT;
		sOutput += sT + g_sHoursString;
	}
	if(iValue>59)
	{
		iT = Math.floor(iValue/60);
		iValue = iValue - iT*60;
		sT = iT.toString();
		if(sT.length==1) sT = "0"+sT;
		sOutput += sT + g_sMinutesString;
	}
	sT = iValue.toString();
	if(sT.length==1) sT = "0"+sT;
	sOutput += sT + g_sSecondsString;
	return sOutput;
}

/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/
var Base64 =
{
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
	// public method for encoding
	encode : function (input)
	{
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		input = Base64._utf8_encode(input);

		while (i < input.length)
		{

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2))
			{
				enc3 = enc4 = 64;
			}
			else if (isNaN(chr3))
			{
				enc4 = 64;
			}

			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		}

		return output;
	},
	// public method for decoding
	decode : function (input)
	{
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		output = Base64._utf8_decode(output);

		return output;

	},
	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},
	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;

		while ( i < utftext.length ) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	}

}
